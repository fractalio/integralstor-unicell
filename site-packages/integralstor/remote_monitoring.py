import os
import shutil
import urllib
import json
from integralstor import networking, config


def _get_config_file_path(initialize=False):
    server_config_file_path = None
    try:
        config_files_dir, err = config.get_config_files_dir()
        if err:
            raise Exception(err)
        server_config_file_path = '%s/remote_monitoring_servers' % config_files_dir
        if initialize:
            if not os.path.isfile(server_config_file_path):
                if not os.path.exists(config_files_dir):
                    os.makedirs(config_files_dir)
                with open(server_config_file_path, 'w') as f:
                    pass
    except Exception, e:
        return None, 'Error retrieving/initializing remote monitoring server configuration file : %s' % str(e)
    else:
        return server_config_file_path, None


def _generate_servers_config_file(server_dict):
    try:
        server_config_file_path, err = _get_config_file_path(initialize=True)
        if err:
            raise Exception(err)
        with open('/tmp/remote_monitoring_conf_file', 'w') as wfd:
            json.dump(server_dict, wfd, indent=2)

        shutil.move('/tmp/remote_monitoring_conf_file',
                    server_config_file_path)
    except Exception, e:
        return False, 'Error regenerating remote monitoring configuration file : %s' % str(e)
    else:
        return True, None


def get_servers():
    servers = {}
    try:
        server_config_file_path, err = _get_config_file_path(initialize=True)
        if err:
            raise Exception(err)
        with open(server_config_file_path, 'r') as f:
            try:
                servers = json.load(f)
            except Exception, e:
                # Return an empty dict if you fail to load the config file..
                pass
    except Exception, e:
        return None, 'Error retrieving remote monitoring server list : %s' % str(e)
    else:
        return servers, None


def update_server(ip, name):
    try:
        url = '//%s/monitoring/api_get_status' % ip
        accessible = False
        prefix = None
        for method in ['http', 'https']:
            result, err = networking.check_url('%s:%s' % (method, url))
            if result:
                accessible = True
                prefix = method
                break
        if not accessible:
            raise Exception('Specified server is not accessible')
        servers, err = get_servers()
        if err:
            raise Exception(err)
        servers[ip] = {'name': name, 'prefix': prefix}
        ret, err = _generate_servers_config_file(servers)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error updating remote monitoring server list: %s' % str(e)
    else:
        return True, None


def delete_server(ip):
    try:
        servers, err = get_servers()
        if err:
            raise Exception(err)
        if ip in servers.keys():
            del servers[ip]
        ret, err = _generate_servers_config_file(servers)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error removing remote monitoring server: %s' % str(e)
    else:
        return True, None


def get_status(ip):
    status = {}
    try:
        servers, err = get_servers()
        if err:
            raise Exception(err)
        if ip not in servers.keys():
            raise Exception(
                'Unknown server. Please configure the server before trying this operation.')
        status['name'] = servers[ip]['name']
        status['ip'] = ip
        url = '%s://%s/monitoring/api_get_status' % (servers[ip]['prefix'], ip)
        response = urllib.urlopen(url)
        output = json.loads(response.read())
        if not output:
            raise Exception('Invalid response from the server')
        data = output
        pools = []
        if 'pools' in data:
            for pool in data['pools']:
                pool_dict = {}
                pool_dict['name'] = pool['pool_name']
                pool_dict['errors'] = pool['errors']
                pool_dict['state'] = pool['state']
                pools.append(pool_dict)
        status['pools'] = pools
        interfaces = []
        if 'interfaces' in data:
            for interface_name, interface_info in data['interfaces'].items():
                interface_dict = {}
                interface_dict['name'] = interface_name
                interface_dict['status'] = '%s(%s)' % (
                    interface_info['status'], interface_info['carrier_status'])
                interfaces.append(interface_dict)
        status['interfaces'] = interfaces
        disks = []
        if 'disks' in data:
            for disk_name, disk_info in data['disks'].items():
                disk_dict = {}
                disk_dict['name'] = disk_name
                disk_dict['status'] = disk_info['status']
                disks.append(disk_dict)
        status['disks'] = disks
        load_avg = {}
        if 'load_avg' in data:
            load_avg['15_min'] = data['load_avg']['15_min']
            load_avg['5_min'] = data['load_avg']['5_min']
        status['load_avg'] = load_avg
        if 'fqdn' in data:
            status['fqdn'] = data['fqdn']
        else:
            status['fqdn'] = ''
        memory = {}
        if 'memory' in data:
            memory['mem_free'] = '%s%s' % (
                data['memory']['mem_free']['value'], data['memory']['mem_free']['unit'])
            memory['mem_total'] = '%s%s' % (
                data['memory']['mem_total']['value'], data['memory']['mem_total']['unit'])
        status['memory'] = memory
        services = []
        if 'services' in data:
            for service_name, service_info in data['services'].items():
                service_dict = {}
                service_dict['name'] = service_name
                if service_info[0] == 0:
                    service_dict['status'] = 'Healthy'
                else:
                    service_dict['status'] = 'Unknown'
                service_dict['complete_status_str'] = service_info[1]
                service_dict['status_str'] = service_info[2]
                services.append(service_dict)
        status['services'] = services
    except Exception, e:
        return None, 'Error retrieving remote monitoring server status: %s' % str(e)
    else:
        return status, None

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
