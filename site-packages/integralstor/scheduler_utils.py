from integralstor_utils import config, db

import crontab
import cron_descriptor
import os


def create_cron_task(command, description, min="1", hour='*', day='*', dow='*', month='*', user='root'):
    cron_task_id = None
    try:
        if not command or not description:
            raise Exception('Invalid parameters')

        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)

        cmd = [
            'insert into cron_tasks(command,description) values (?,?)', (command, description)]
        cron_task_id, err = db.execute_iud(db_path, [cmd], get_rowid=True)
        if err:
            raise Exception(err)

        log_path, err = config.get_log_folder_path()
        if err:
            raise Exception(err)
        log_dir = '%s/cron_logs' % log_path
        if not os.path.isdir(log_dir):
            os.mkdir(log_dir)
        log_file = '%s/%d.log' % (log_dir, cron_task_id)
        command = '%s >> %s 2>&1' % (command, log_file)

        cron = crontab.CronTab(user)
        job = cron.new(command=command, comment='%d' % cron_task_id)
        job.setall(min, hour, day, dow, month)
        if job.is_valid():
            job.enable()
            cron.write()
        else:
            raise Exception('Cron entry not valid.')

    except Exception, e:
        return None, 'Error creating cron entry : %s' % str(e)
    else:
        return cron_task_id, None


def update_cron_schedule(cron_task_id=None, user='root', min='0', hour='0', day='*', dow='*', month='*'):
    """Update schedule of a specific crontab entry(not the cron_tasks table entry)

    """
    try:
        if cron_task_id is None:
            raise Exception('cron_task_id required')
        found = False

        cron = crontab.CronTab(user)
        # can not use 'jobs = cron.find_comment(str(cron_task_id))' since it
        # returns True always
        if cron:
            for entry in cron:
                if entry.comment == str(cron_task_id):
                    found = True
                    entry.setall(min, hour, day, dow, month)
                    if entry.is_valid():
                        entry.enable()
                        cron.write()
                    else:
                        raise Exception('Cron entry not valid.')
        if not found:
            raise Exception(
                'Found no matching entry with comment string %s' % str(cron_task_id))

    except Exception, e:
        return None, 'Error updating cron entry: %s' % str(e)
    else:
        return True, None


def get_cron_tasks(cron_task_id=None, user='root'):
    """Function to return all the user created cron."""
    cron_list = []
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)

        if cron_task_id is None:
            query = 'select * from cron_tasks'
        else:
            query = 'select * from cron_tasks where cron_task_id=%s' % cron_task_id

        cron_db_entries, err = db.get_multiple_rows(db_path, query)
        if err:
            raise Exception(err)

        if cron_db_entries:
            cron = crontab.CronTab(user)
            for cron_db_entry in cron_db_entries:
                cron_dict = {}
                cron_dict['description'] = cron_db_entry['description']
                cron_dict['cron_task_id'] = cron_db_entry['cron_task_id']
                jobs = cron.find_comment(str(cron_db_entry['cron_task_id']))
                if jobs:
                    for job in jobs:
                        cron_dict['schedule_description'] = job.description(
                            use_24hour_time_format=True)
                        cron_dict['job'] = job
                        break
                cron_list.append(cron_dict)
    except Exception, e:
        return None, 'Error listing all cron entries : %s' % str(e)
    else:
        return cron_list, None


def delete_cron(cron_task_id, user='root'):
    """Delete a cron by the cron_task_id."""
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)

        query_tasks = 'select * from tasks where cron_task_id="%d"' % int(
            cron_task_id)
        tasks, err = db.get_multiple_rows(db_path, query_tasks)
        if err:
            raise Exception(err)

        cmd_list = []
        cmd_list.append(
            ['delete from cron_tasks where cron_task_id=%d' % cron_task_id])
        cmd_list.append(
            ['update tasks set status="cancelled" where cron_task_id=%s and status is not "completed"' % cron_task_id])
        if tasks:
            for task in tasks:
                cmd_list.append(
                    ['update subtasks set status="cancelled" where task_id=%d  and status is not "completed"' % task['task_id']])

        ret, err = db.execute_iud(db_path, cmd_list)
        if err:
            raise Exception(err)

        cron = crontab.CronTab(user)
        cron.remove_all(comment=str(cron_task_id))
        cron.write()
    except Exception, e:
        return False, "Error deleting cron entry : %s" % str(e)
    else:
        return True, None


def main():
    # print add_cron_entry('ls -l', "Test entry",2,'*','*','*','*')
    # print get_all_cron_tasks()
    # print get_cron_task(1)
    # print delete_cron(1)
    pass


if __name__ == "__main__":
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
