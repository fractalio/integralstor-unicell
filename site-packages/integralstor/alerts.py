import os
import os.path

from integralstor_utils import config, db
from integralstor import event_notifications, datetime_utils

def _load_definitions(type):
    """Load the reference tables

    """
    definitions = None
    try:
        if type not in ['severity', 'subsystem']:
            raise Exception('Unknown definitions type specified')
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        if type == 'severity':
            query = 'select * from reference_severity_types'
        elif type == 'subsystem':
            query = 'select * from reference_subsystem_types'
        definitions, err = db.get_multiple_rows(db_path, query)
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error loading alerts %s definitions : %s' % (type, str(e))
    else:
        return definitions, None

def get_alerts(count = -1, offset = -1):
    """Get the alert messages, latest first, with alert_id starting offset+1 (if -1, get the last <count> entries)

    """
    alerts_list = []
    try:

        if count == -1:
            set_count = False
        else:
            set_count = True
        if offset == -1:
            if set_count:
                query = 'select * from alerts order by alert_id desc limit %d'%count
            else:
                query = 'select * from alerts order by alert_id desc'
        else:
            if set_count:
                query = 'select * from (select * from alerts order by alert_id desc) limit %d, %d'%(offset, count)
            else:
                query = 'select * from (select * from alerts order by alert_id desc) limit %d, 20'%offset
        alerts_list, err = _get_and_parse_alerts(query)
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error loading alerts : %s' % str(e)
    else:
        return alerts_list, None

def _get_and_parse_alerts(query):
    """Load the results from the db and do the appropriate time conversions if possible.

    """
    alerts_list = []
    try:
        #print query
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        alerts_list, err = db.get_multiple_rows(db_path, query)
        #print alerts_list
        if err:
            raise Exception(err)
        if alerts_list:
            severity_defs, err = _load_definitions('severity')
            if err:
                raise Exception(err)

            subsystem_defs, err = _load_definitions('subsystem')
            if err:
                raise Exception(err)

            for al in alerts_list:
                #print al
                for defn in severity_defs: 
                    if defn['id'] == al['severity_type_id']:
                        al['severity'] = defn['description']
                for defn in subsystem_defs: 
                    if defn['id'] == al['subsystem_type_id']:
                        al['subsystem'] = defn['description']
                try:
                    fat, err = datetime_utils.convert_from_epoch(al['first_alert_time'], return_format='str', str_format = '%c', to='local')
                    if err:
                        raise Exception(err)
                    lut, err = datetime_utils.convert_from_epoch(al['last_update_time'], return_format='str', str_format = '%c', to='local')
                    if err:
                        raise Exception(err)
                    al['first_alert_time'] = fat
                    al['last_update_time'] = lut
                except Exception, e:
                    print str(e)
                    pass
    except Exception, e:
        return None, 'Error getting and parsing alerts : %s' % str(e)
    else:
        return alerts_list, None

def delete_all_alerts():
    """Remove all alerts from the db

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        command_list = []
        cmd = ['delete from alerts']
        command_list.append(cmd)
        ret, err = db.execute_iud(db_path, command_list)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error removing all alerts : %s' % str(e)
    else:
        return True, None

def _get_repeat_entry(alert_dict, past_x_seconds = 900):
    """Check the db to see if the passed alert is a repeat of an existing alert entry in the past x seconds

    """
    result = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        now, err = datetime_utils.get_epoch(when='now', num_previous_days=0)
        if alert_dict['component']:
            query = "select * from alerts where severity_type_id = '%d' and subsystem_type_id = '%d' and component = '%s' and alert_str=\"%s\" and  first_alert_time >= %d;" % (alert_dict['severity_type_id'], alert_dict['subsystem_type_id'], alert_dict['component'], alert_dict['alert_str'], now-past_x_seconds)
        else:
            query = "select * from alerts where severity_type_id = '%d' and subsystem_type_id = '%d' and alert_str=\"%s\" and  first_alert_time >= %d);" % (alert_dict['severity_type_id'], alert_dict['subsystem_type_id'], alert_dict['alert_str'], now-past_x_seconds)
        #print query
        result, err = db.get_single_row(db_path, query)
        if err:
            raise Exception(err)
        #print result, err
    except Exception, e:
        return None, 'Error checking for repeats : %s' % str(e)
    else:
        return result, None

def record_alerts(alerts_list):
    """Record a set of passed list containing alert dictionaries into the DB."""
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        if alerts_list:
            now, err = datetime_utils.get_epoch(when='now', num_previous_days=0)
            if err:
                raise Exception(er)
            for alert in alerts_list:
                #print alert
                command_list = []
                result, err = _get_repeat_entry(alert)
                #print 'repeat', result, err
                if err:
                    raise Exception(err)
                update_alert_id = None
                if result:
                    cmd = ['update alerts set repeat_count=%d, last_update_time="%d" where alert_id=%d' % (int(result['repeat_count'])+1, now, result['alert_id'])]
                    update_alert_id = result['alert_id']
                    #print 'updating!', cmd
                else:
                    if 'component' not in alert or (not alert['component']):
                        cmd = [
                            'insert into alerts(first_alert_time, last_update_time, severity_type_id, subsystem_type_id, alert_str) values (?,?,?,?,?)', (now, now, alert['severity_type_id'], alert['subsystem_type_id'], alert['alert_str'],)]
                    else:
                        cmd = [
                            'insert into alerts(first_alert_time, last_update_time, severity_type_id, subsystem_type_id, component, alert_str) values (?,?,?,?,?,?)', (now, now, alert['severity_type_id'], alert['subsystem_type_id'], alert['component'], alert['alert_str'],)]
                command_list.append(cmd)
                #print command_list
                rowid, err = db.execute_iud(db_path, command_list, get_rowid=True)
                if err:
                    raise Exception(err)
                if update_alert_id:
                    alert_id = update_alert_id
                else:
                    alert_id = rowid

                ret, err = event_notifications.record_event_notification_holding(event_id = alert_id, event_type_id=1, subsystem_type_id=alert['subsystem_type_id'], severity_type_id = alert['severity_type_id'])
                #print ret, err
                if err:
                    raise Exception(err)
    except Exception, e:
        #print str(e)
        return False, 'Error recording alerts : %s' % str(e)
    else:
        return True, None

def update_last_view_time(request):
    """Called to update the last time a particular user opened their alerts..

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        now, err = datetime_utils.get_epoch(when='now', num_previous_days=0)
        if err:
            raise Exception(er)
        cmd_list = []
        cmd = ["INSERT OR REPLACE INTO admin_alerts (user, last_refresh_time) values (?,?);", (
            request.user.username, now)]
        cmd_list.append(cmd)
        test, err = db.execute_iud(db_path, cmd_list)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error updating last view time for alerts : %s' % str(e)
    else:
        return True, None


def new_alerts_present(username):
    """Check for new alerts based on the last access time for the specified user."""
    ret = False
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        query = 'select * from admin_alerts where user = "%s"'%username
        entry, err = db.get_single_row(db_path, query)
        if err:
            raise Exception(err)
        if not entry:
            ret = True
        #print entry
        query = 'select count(*) as count from alerts where last_update_time > "%d"'%entry['last_refresh_time']
        #print query
        entry, err = db.get_single_row(db_path, query)
        #print entry, err
        if err:
            raise Exception(err)
        if entry and int(entry['count']) > 0:
            ret = True
        
    except Exception, e:
        return False, 'Error checking for new alerts : %s' % str(e)
    else:
        return ret, None

def generate_alert_email_body(alert_id):
    """Given an alert id, generate the appropriate email message body for that alert

    """
    msg = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        query = 'select * from alerts where alert_id = "%s"'%alert_id
        entry, err = db.get_single_row(db_path, query)
        #print entry
        if err:
            raise Exception(err)
        fat, err = datetime_utils.convert_from_epoch(entry['first_alert_time'], return_format='str', str_format = '%c', to='local')
        if err:
            raise Exception(err)
        lut, err = datetime_utils.convert_from_epoch(entry['last_update_time'], return_format='str', str_format = '%c', to='local')
        if err:
            raise Exception(err)
        msg = 'Alert time: %s\nAlert message: %s.'%(lut, entry['alert_str'])

        if entry['repeat_count'] > 1:
            msg += ' This alert has been generated %d times since %s.'%(entry['repeat_count'], fat)
    except Exception, e:
        return None, 'Error generating alert email message body : %s' % str(e)
    else:
        return msg, None

def export_old_alerts(older_than_days=1):
    """Move all alerts older than the older_than_days into a file in /var/log/integralstor/exported_logs dir

    """
    try:
        cutoff_seconds, err = datetime_utils.get_epoch(when='now', num_previous_days=older_than_days)
        if err:
            raise Exception(err)
        #query = "select * from alerts where last_update_time < Datetime('now', '-%d days') order by alert_id;"%older_than_days
        query = "select * from alerts where last_update_time < %d order by alert_id;"%cutoff_seconds
        full_alerts_list, err = _get_and_parse_alerts(query)
        if err:
            raise Exception(err)
        alerts_list = []
        #print 'full', full_alerts_list
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        for a in full_alerts_list:
            #If it is still in the holding table then skip it so it can get processed..
            query = "select * from event_notifications_holding where event_id=%d;"%int(a['alert_id'])
            ret, err = db.get_single_row(db_path, query)
            #print ret, err
            if err:
                raise Exception(err)
            if not ret:
                alerts_list.append(a)
        #print 'to export', alerts_list
        if alerts_list:
            delete_commands = []
            export_dir_name = '/var/log/integralstor/exported_logs'
            if not os.path.exists(export_dir_name):
                os.makedirs(export_dir_name)
            now, err = datetime_utils.get_epoch(when='now', num_previous_days=0)
            if err:
                raise Exception(err)
            now_str, err = datetime_utils.convert_from_epoch(now, return_format='str', str_format = '%Y_%m_%d_%H_%M', to='local')
            export_filename = 'alerts_%s'%now_str
            #print export_filename
            with open('%s/%s'%(export_dir_name, export_filename), 'w') as f:
                f.write('First alert time(UTC)  |  Last update time(UTC) | Repeat count | Subsystem | Severity | Alert message\n')
                f.write('-------------------------------------------------------------------------------------------\n')
                for al in alerts_list:
                    f.write('%s | %s | %d | %s | %s | %s\n\n'%(al['first_alert_time'],al['last_update_time'], al['repeat_count'], al['subsystem'], al['severity'], al['alert_str']))
                    delete_commands.append(['delete from alerts where alert_id="%d"'%int(al['alert_id'])])
            #print delete_commands
            db_path, err = config.get_db_path()
            if err:
                raise Exception(err)
            ret, err = db.execute_iud(db_path, delete_commands)
            if err:
                raise Exception(err)

    except Exception, e:
        return False, 'Error exporting old alerts : %s' % str(e)
    else:
        return True, None
# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
