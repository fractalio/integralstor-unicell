import os
import time
import pytz
import datetime

from integralstor import command


def get_epoch(when='now', num_previous_days=0):
    ret = None
    try:
        if when not in ['now', 'midnight']:
            raise Exception('Invalid when parameter specified')
        if when == 'now':
            ret = int(time.time()) - num_previous_days * 24 * 60 * 60
        elif when == 'midnight':
            midnight = datetime.datetime.combine(
                datetime.date.today(), datetime.time.min)
            reqd_midnight = midnight - \
                datetime.timedelta(days=num_previous_days)
            ret = int(reqd_midnight.strftime('%s'))
    except Exception, e:
        return None, 'Error retrieving epoch UTC time : %s' % str(e)
    else:
        return ret, None


def convert_from_epoch(secs, return_format='datetime', str_format='%c', to='local'):
    ret = None
    try:
        if return_format not in ['datetime', 'str']:
            raise Exception('Invalid return format specified')
        if to not in ['local', 'utc']:
            raise Exception('Invalid convert to timezone specified')
        if to == 'local':
            local_tz_dict, err = get_system_timezone()
            if err:
                raise Exception(err)
            tz = pytz.timezone(local_tz_dict['timezone_str'])
        else:
            tz = pytz.utc

        d = datetime.datetime.fromtimestamp(secs, tz)
        if return_format == 'str':
            ret = d.strftime(str_format)
        else:
            ret = d
    except Exception, e:
        return None, 'Error converting epoch time to local time %s' % str(e)
    else:
        return ret, None


def update_system_date_time(system_date, system_time, system_timezone):
    return_dict = {}
    try:
        if system_timezone == None:
            pass
        else:
            cmd = 'timedatectl set-timezone %s' % system_timezone
            # print cmd
            output, err = command.get_command_output(cmd)
            if err:
                raise Exception(err)
            return_dict['timezone_set'] = True
            return_dict['timezone_set_to'] = system_timezone

        if system_time == None:
            pass
        else:
            tz, err = get_system_timezone()
            if err:
                raise Exception(err)
            if 'system_timezone_code' in tz:
                cmd = 'date -s "%s %s"' % (system_time,
                                           tz['system_timezone_code'])
            else:
                cmd = 'date -s "%s"' % system_time
            output, err = command.get_command_output(cmd)
            if err:
                raise Exception(err)
            return_dict['time_set'] = True
            return_dict['time_set_to'] = system_time

        if system_date == None:
            pass
        else:
            date_component = system_date.split("/")
            if len(date_component) != 3:
                raise Exception(
                    "The input date format is not correct (Ex: MM/DD/YYYY)")
            system_date = '%s-%s-%s' % (date_component[2],
                                        date_component[0], date_component[1])
            output_time, err = command.get_command_output("date +%T")
            if err:
                raise Exception(err)
            cmd = 'date -s "%s %s"' % (system_date, output_time[0])
            output, err = command.get_command_output(cmd)
            if err:
                raise Exception(err)
            return_dict['date_set'] = True
            return_dict['date_set_to'] = system_date

        cmd = "hwclock -w"
        output, err = command.get_command_output(cmd)
        if err:
            raise Exception(err)
    except Exception, e:
        return None, str(e)
    else:
        return return_dict, None


def get_system_timezone():
    return_dict = {}
    try:
        cmd = "timedatectl | grep 'Time' | grep -oE '(\S+/.+$)'"
        system_timezone, err = command.get_command_output(cmd, shell=True)
        if err:
            cmd = "timedatectl | grep 'Time' | grep -oE '(\S+UTC.+$)'"
            system_timezone, err = command.get_command_output(cmd, shell=True)
            if err:
                raise Exception(err)
        stz_str = system_timezone[0]
        return_dict['system_timezone'] = stz_str
        brackets_pos = stz_str.find('(')
        if brackets_pos:
            comma_pos = stz_str.find(',')
            stz_code = stz_str[brackets_pos + 1:comma_pos]
            return_dict['system_timezone_code'] = stz_code
        path = os.path.realpath('/etc/localtime')
        components = path.split('/')
        if components:
            if 'UTC' in components:
                return_dict['timezone_str'] = 'UTC'
            else:
                return_dict['timezone_str'] = '%s/%s' % (
                    components[-2], components[-1])
        else:
            raise Exception('Unknown timezone')
    except Exception, e:
        return None, str(e)
    else:
        return return_dict, None


def main():
    ep, err = get_epoch(when='now', num_previous_days=1)
    #ep, err = get_epoch(when='midnight', num_previous_days=1)
    print ep, err
    '''
    dt, err = convert_from_epoch(ep, return_format='datetime', str_format = '%c', to='utc')
    print dt, err
    '''
    dt, err = convert_from_epoch(
        ep, return_format='str', str_format='%c', to='utc')
    print 'utc', dt, err
    '''
    dt, err = convert_from_epoch(ep, return_format='datetime', str_format = '%c', to='local')
    print dt, err
    '''
    dt, err = convert_from_epoch(
        ep, return_format='str', str_format='%c', to='local')
    print 'local', dt, err
    #output, err = update_date_time("02/02/2020", None)
    #output, err = update_date_time("02/02/2020", "15:15")
    # output, err = update_date_time("02/02/2020". "15:15")
    # print output,err


if __name__ == '__main__':
    print get_system_timezone()
    pass

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
