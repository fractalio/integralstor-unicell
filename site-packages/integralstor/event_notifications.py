from integralstor_utils import db, config, scheduler_utils
from integralstor import mail

def get_reference_table_entries(table_name_list):
    """Load the reference table entries for the tables passed

    """
    return_dict = None
    try:
        if table_name_list:
            return_dict = {}
            db_path, err = config.get_db_path()
            if err:
                raise Exception(err)
            for table in table_name_list:
                query = 'select * from %s'%table
                ref_list, err = db.get_multiple_rows(db_path, query)
                if err:
                    raise Exception(err)
                if ref_list:
                    td = {}
                    for r in ref_list:
                        td[r['id']] = r['description']
                    return_dict[table] = td
    except Exception, e:
        return None, 'Error getting reference table entries : %s'%str(e)
    else:
        return return_dict, None

def create_event_notification(schedule, event_type_id, event_subtype_id, subsystem_type_id, notification_type_id, severity_type_id, enc_id, reference_table_entries = None):
    """Create an event notification. This involves creating a trigger entry and a cron entry

    """
    audit_str = None
    try:
        psp, err = config.get_python_scripts_path()
        if err:
            raise Exception(err)
        ent_id, err = create_event_notification_trigger(event_type_id, event_subtype_id, subsystem_type_id, notification_type_id, severity_type_id, enc_id, -1)
        if err:
            raise Exception(err)
        if event_type_id == 1:
            cmd = 'python %s/process_alert_notifications.py %d'%(psp, int(ent_id))
        elif event_type_id == 2:
            cmd = 'python %s/process_audit_notifications.py %d'%(psp, int(ent_id))
        description, err = stringify_event_notification(event_type_id, notification_type_id, subsystem_type_id, severity_type_id, reference_table_entries = reference_table_entries)
        if err:
            delete_event_notification_trigger(ent_id)
            raise Exception(err)
        cron_task_id, err = scheduler_utils.create_cron_task(
            cmd, description, schedule[0], schedule[1], schedule[2], schedule[3], schedule[4])
        if err:
            delete_event_notification_trigger(ent_id)
            raise Exception(err)

        ret, err = update_event_notification_trigger_cron_id(ent_id, cron_task_id)
        if err:
            delete_event_notification_trigger(ent_id)
            scheduler_utils.delete_cron(cron_task_id)
            raise Exception(err)

        cron_task_list, err = scheduler_utils.get_cron_tasks(cron_task_id)
        if err:
            audit_str = 'Created event notification : %s. Scheduled for <Error while retrieving schedule>'%description
        else:
            audit_str = 'Created event notification : %s. Scheduled for %s'%(description, cron_task_list[0]['schedule_description'])
    except Exception, e:
        return None, 'Error creating event notification : %s'%str(e)
    else:
        return audit_str, None

def delete_event_notification(ent_id):
    """Remove an event notification - from the triggers table and from the cron.

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        ent, err = get_event_notification_trigger(ent_id)
        if err:
            raise Exception(err)
        #print ent
        ret, err = scheduler_utils.delete_cron(ent['cron_task_id'])
        if err:
            raise Exception(err)
        if ent['notification_type_id'] == 1:
            ret, err = mail.delete_event_notification_configuration(ent['enc_id'])
            if err:
                raise Exception(err)
        ret, err = delete_event_notification_holdings(ent_id)
        if err:
            raise Exception(err)
        ret, err = delete_event_notification_trigger(ent_id)
        if err:
            raise Exception(err)

    except Exception, e:
            raise Exception(err)

    except Exception, e:
        return False, 'Error removing event notification : %s'%str(e)
    else:
        return True, None

def create_event_notification_trigger(event_type_id, event_subtype_id, subsystem_type_id, notification_type_id, severity_type_id, enc_id, cron_task_id):
    """Create an entry in the triggers table with the supplied params.

    """
    ent_id = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        ent_id, err = db.execute_iud(db_path, [["insert into event_notification_triggers (event_type_id, event_subtype_id, subsystem_type_id, notification_type_id, severity_type_id, enc_id, cron_task_id) values (?,?,?,?,?,?,?)", ( event_type_id, event_subtype_id, subsystem_type_id, notification_type_id, severity_type_id, enc_id, cron_task_id,)]], get_rowid=True)
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error creating event notification trigger : %s'%str(e)
    else:
        return ent_id, None

def delete_event_notification_trigger(ent_id):
    """Remove the specified triggers table entry.

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        ret, err = db.execute_iud(db_path, [["delete from  event_notification_triggers where ent_id='%d'"%int(ent_id)]])
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error removing event notification trigger : %s'%str(e)
    else:
        return True, None

def get_event_notification_triggers(event_type_id=None,event_subtype_id=None, subsystem_type_id=None, severity_type_id=None):
    """Get all the trigger entries that match the specified parameters..

    """
    ent_list = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        if not event_type_id:
            query = 'select * from event_notification_triggers'
        else:
            #Get all scheduled notifications for this event type and then filter down later..
            query = 'select * from event_notification_triggers where event_type_id=%d'%event_type_id
        ent_list, err = db.get_multiple_rows(db_path, query)
        if err:
            raise Exception(err)
        if ent_list:
            for ent in ent_list:
                #print ent
                if event_subtype_id and ent['event_subtype_id'] != -1:
                    if ent['event_subtype_id'] != event_subtype_id:
                        continue
                if subsystem_type_id and ent['subsystem_type_id'] != -1:
                    if ent['subsystem_type_id'] != subsystem_type_id:
                        continue
                if severity_type_id and ent['severity_type_id'] not in [-1, 0]:
                    if ent['severity_type_id'] != severity_type_id:
                        continue
                #print 'retaining ent - ', ent
                cron_list, err = scheduler_utils.get_cron_tasks(ent['cron_task_id'])
                if err:
                    raise Exception(err)
                if cron_list:
                    ent['schedule_description'] = cron_list[0]['schedule_description']
                    ent['description'] = cron_list[0]['description']
    except Exception, e:
        return None, 'Error retrieving matching event notification configurations : %s'%str(e)
    else:
        return ent_list, None

def update_event_notification_trigger_cron_id(ent_id, cron_task_id):
    """Update the cron id for the trigger - this is because we dont know it in advance when creating the trigger.

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        ret, err = db.execute_iud(db_path, [["update event_notification_triggers set cron_task_id=? where ent_id = ?", (cron_task_id, ent_id,)]])
        if err:
            raise Exception(err)
    except Exception, e:
        return False, "Error updating event notification trigger's cron task id : %s"%str(e)
    else:
        return True, None


def get_event_notification_trigger(ent_id):
    """Get the trigger entry corresponding to the passed trigger id

    """
    return_dict = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        query = 'select * from event_notification_triggers where ent_id=%d'%int(ent_id)
        return_dict, err = db.get_single_row(db_path, query)
        if err:
            raise Exception(err)
        if return_dict:
            cron_list, err = scheduler_utils.get_cron_tasks(return_dict['cron_task_id'])
            if err:
                raise Exception(err)
            if cron_list:
                return_dict['schedule_description'] = cron_list[0]['schedule_description']
                return_dict['description'] = cron_list[0]['description']
    except Exception, e:
        return None, 'Error retrieving event notification trigger : %s'%str(e)
    else:
        return return_dict, None


def stringify_event_notification(event_type_id, notification_type_id, subsystem_type_id = -1, severity_type_id = -1, event_subtype_id = -1, reference_table_entries = None):
    """Convert the passed entries into a user readable line to display on the screens.

    """
    ret_str = None
    try:
        if not reference_table_entries:
            reference_table_entries, err = get_reference_table_entries(['reference_event_types','reference_notification_types', 'reference_severity_types', 'reference_subsystem_types'])
            if err:
                raise Exception(err)
        event = reference_table_entries['reference_event_types'][event_type_id]
        notification = reference_table_entries['reference_notification_types'][int(notification_type_id)]
        subsystem = None
        if subsystem_type_id != -1:
            subsystem = reference_table_entries['reference_subsystem_types'][subsystem_type_id]
        severity = None
        if severity_type_id != -1:
            severity = reference_table_entries['reference_severity_types'][severity_type_id]

        ret_str = 'Send %ss for %s'%(notification.lower(), event.lower())
        if subsystem:
            ret_str += ' for "%s" events'%subsystem.lower()
        if severity:
            ret_str += ' of severity level "%s"'%severity.lower()
        ret_str += '.'
    except Exception, e:
        return None, 'Error getting converting event notification entry to a string : %s'%str(e)
    else:
        return ret_str, None

def record_event_notification_holding(event_id, event_type_id, event_subtype_id=-1, subsystem_type_id=-1, severity_type_id=-1):
    """Create an notification holding entry by looking up the triggers table for all matching entries..

    """
    try:
        ent_list, err = get_event_notification_triggers(event_type_id = event_type_id, event_subtype_id = event_subtype_id, subsystem_type_id = subsystem_type_id, severity_type_id=severity_type_id)
        if err:
            raise Exception(err)
        #print ent_list
        if ent_list:
            db_path, err = config.get_db_path()
            if err:
                raise Exception(err)
            command_list = []
            for ent in ent_list:
                cmd = [
                    'insert into event_notifications_holding(event_id, ent_id, status) values (?,?,?)', (event_id, ent['ent_id'], 1,)]
                command_list.append(cmd)
            #print command_list
            ret, err = db.execute_iud(db_path, command_list)
            if err:
                raise Exception(err)
    except Exception, e:
        return False, 'Error recording event notifications : %s'%str(e)
    else:
        return True, None

def delete_event_notification_holdings(ent_id):
    """Remove all the holdings entries corresponding to the specified trigger id

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        ret, err = db.execute_iud(db_path, [["delete from  event_notifications_holding where ent_id='%d'"%int(ent_id)]])
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error removing event notification holdings : %s'%str(e)
    else:
        return True, None

def get_event_notification_holdings(id, mode='by_event_notification_trigger_id'):
    """Get all holding entries either by trigger id or by event_id

    """
    enh_list = None
    try:
        if mode not in ['by_event_notification_trigger_id', 'by_event_id']:
            raise Exception('Unknown mode specified.')
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        if mode == 'by_event_id':
            query = 'select event_notifications_holding.* from event_notifications_holding inner join event_notification_triggers on (event_notifications_holding.ent_id = event_notification_triggers.ent_id and event_notification_triggers.event_type_id = %d)'%int(id)
        elif mode == 'by_event_notification_trigger_id':
            query = 'select * from event_notifications_holding where ent_id = %d'%int(id)
        #print query
        enh_list, err = db.get_multiple_rows(db_path, query)
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error retrieving event notification holdings of type %s: %s'%(id, str(e))
    else:
        return enh_list, None

def delete_event_notification_holding(enh_id):
    """Remove a specific holding entry

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        ret, err = db.execute_iud(db_path, [["delete from  event_notifications_holding where enh_id=%d"%enh_id]])
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error removing event notification holding: %s'%str(e)
    else:
        return True, None

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
