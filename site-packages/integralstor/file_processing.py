import os
import os.path
import stat


def reversed_lines(file):
    """Generate the lines of file in reverse order."""
    part = ''
    for block in _reversed_blocks(file):
        for c in reversed(block):
            if c == '\n' and part:
                yield part[::-1]
                part = ''
            part += c
    if part:
        yield part[::-1]


def _reversed_blocks(file, blocksize=4096):
    """Generate blocks of file's contents in reverse order."""
    file.seek(0, os.SEEK_END)
    here = file.tell()
    while 0 < here:
        delta = min(blocksize, here)
        here -= delta
        file.seek(here, os.SEEK_SET)
        yield file.read(delta)


def update_dir_ownership_and_permissions(d):
    "Update the owner user and/or group for a dir"""
    try:
        if not d:
            raise Exception('Required parameter not passed')
        if 'set_owner' in d and d['set_owner']:
            if 'uid' not in d or not d['uid']:
                raise Exception('Could not set owner, uid not specified')
            os.chown(d['path'], int(d['uid']), -1)
        if 'set_group' in d and d['set_group']:
            if 'gid' not in d or not d['gid']:
                raise Exception('Could not set group, gid not specified')
            os.chown(d['path'], -1, int(d['gid']))
        mode = 0
        if d['owner_read']:
            mode = mode | stat.S_IRUSR
        if d['owner_write']:
            mode = mode | stat.S_IWUSR
        if d['owner_execute']:
            mode = mode | stat.S_IXUSR
        if d['group_read']:
            mode = mode | stat.S_IRGRP
        if d['group_write']:
            mode = mode | stat.S_IWGRP
        if d['group_execute']:
            mode = mode | stat.S_IXGRP
        if d['other_read']:
            mode = mode | stat.S_IROTH
        if d['other_write']:
            mode = mode | stat.S_IWOTH
        if d['other_execute']:
            mode = mode | stat.S_IXOTH
        # print mode
        os.chmod(d['path'], mode)

    except Exception, e:
        return False, 'Error setting ownership/permissions : %s' % str(e)
    else:
        return True, None


def get_or_create_dir(path):
    """Utility function, when given a path will create if the directory does not exist."""
    try:
        if not os.path.exists(path):
            os.makedirs(path)
        else:
            pass
        return True, None
    except Exception, e:
        return None, e

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
