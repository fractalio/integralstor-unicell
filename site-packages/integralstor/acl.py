from integralstor import command


def get_all_aces(path):
    """Get all the access control entries for the given path."""
    aces = []
    try:
        lines, err = command.get_command_output('getfacl "%s"' % path)
        if err:
            raise Exception(err)
        for line in lines:
            if not line.strip():
                # print 'blank line so skipping'
                continue
            if line.strip()[0] == '#':
                # print 'comment line so skipping : ',line
                continue
            # print 'normal line : ', line
            if line.find('::'):
                fields = line.strip().split(':')
                aces.append(fields)
            # print aces
    except Exception, e:
        return None, 'Error retrieving all ACLs : %s' % str(e)
    else:
        return aces, None


def get_minimal_aces(ace_list):
    """Get all minimal ACLs which dont have the user/group names specified."""
    aces = []
    try:
        if not ace_list:
            raise Exception('No ACL list passed')
        for ace in ace_list:
            if ace[0] in ['user', 'group', 'other'] and not ace[1]:
                aces.append(ace)
    except Exception, e:
        return None, 'Error retrieving minimal ACLs : %s' % str(e)
    else:
        return aces, None


def get_ug_aces(ace_list, ug_name, type):
    """Get all ACL entries which relate to a user or group.

    Type shd be either 'user' or 'group'
    """
    aces = []
    try:
        if not ace_list:
            raise Exception('No ACL list passed')
        if type not in ['user', 'group']:
            raise Exception('Invalid type passed')
        for ace in ace_list:
            if ace[0] != 'default':
                continue
            if ace[1] == type and ace[2]:
                if ug_name and ace[2] != ug_name:
                    continue
                aces.append(ace)
    except Exception, e:
        return None, 'Error retrieving user/group ACLs : %s' % str(e)
    else:
        return aces, None


def get_new_ug_list(ace_list, all_ug_list, type):
    """Get the users/groups which dont figure in the current ACE list.

    Type shd be either 'user' or 'group'
    """
    ug_list = []
    try:
        if not ace_list:
            raise Exception('No ACL list passed')
        if type not in ['user', 'group']:
            raise Exception('Invalid type passed')
        existing_ug_aces, err = get_ug_aces(ace_list, None, type)
        if err:
            raise Exception(err)
        existing_ugs = []
        for ace in existing_ug_aces:
            existing_ugs.append(ace[2])
        if all_ug_list:
            for ug in all_ug_list:
                if ug not in existing_ugs:
                    ug_list.append(ug)
    except Exception, e:
        return None, 'Error retrieving new user/group list : %s' % str(e)
    else:
        return ug_list, None


def get_mask_ace(ace_list):
    """Get the ACE entries corresponding to the mask from the passed ACE list."""
    aces = []
    try:
        for ace in ace_list:
            if ace[0] in ['mask'] and not ace[1]:
                aces.append(ace)
    except Exception, e:
        return None, 'Error retrieving mask ACLs : %s' % str(e)
    else:
        return aces, None


def delete_ace(path, name, type, recursive=False):
    """Remove the ACE with the given name and type for the given path."""
    try:
        if not path or not name or not type:
            raise Exception('Required information not passed')
        if type not in ['user', 'group']:
            raise Exception('Invalid type passed')
        if recursive:
            cmd = 'setfacl -R -x %s:"%s",default:%s:"%s" "%s"' % (
                type, name, type, name, path)
        else:
            cmd = 'setfacl  -x %s:"%s",default:%s:"%s" "%s"' % (
                type, name, type, name, path)
        # print cmd
        lines, err = command.get_command_output(cmd)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error removing ACL : %s' % str(e)
    else:
        return True, None


def create_ace_entries(path, users, groups, recursive):
    """Create an ACE entry for the given path with the supplied users and groups."""
    try:
        if recursive:
            cmd = r'setfacl -R -m'
        else:
            cmd = r'setfacl -m '
        for user in users:
            cmd += 'u:"%s":---,d:u:"%s":---,' % (user, user)
        for group in groups:
            cmd += 'g:"%s":---,d:g:"%s":---,' % (group, group)
        if cmd[-1] == ',':
            cmd = cmd[:-1]
        cmd += ' "%s"' % path
        # print cmd
        lines, err = command.get_command_output(cmd)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error adding ACL entries : %s' % str(e)
    else:
        return True, None


def _convert_to_ace_str(r, w, x):
    """ Convert the provided bool values into an ACE string."""
    acl_str = ''
    try:
        acl_str += 'r' if r else '-'
        acl_str += 'w' if w else '-'
        acl_str += 'x' if x else '-'
    except Exception, e:
        return None, 'Error generating ACL string : %s' % str(e)
    else:
        return acl_str, None


def update_ace_entries(path, d):
    '''Update the ACE entries for the given path by taking the info from the passed dict.

    The dictionary d will contain entries of the form :
    ou_r, ou_w, ou_x for the owner user,
    og_r, og_w, og_x for owner group,
    ot_r, ot_w, ot_x for others,
    user_<username>_r, user_<username>_w, user_<username>_x for named users,
    group_<groupname>_r, group_<groupname>_w, group_<groupname>_x for named groups_,
    with values being set to True or False
    '''
    try:
        users = {}
        groups = {}
        for key, val in d.items():
            # print key, val
            if key.startswith('user_') or key.startswith('group_'):
                if key.startswith('user_'):
                    l = users
                    name = key[5:-2]
                else:
                    l = groups
                    name = key[6:-2]
                perm = key[-1]
                # print 'a'
                if name not in l:
                    perms_list = [False, False, False]
                    if perm == 'r':
                        perms_list[0] = val
                    elif perm == 'w':
                        perms_list[1] = val
                    elif perm == 'x':
                        perms_list[2] = val
                    l[name] = perms_list
                else:
                    if perm == 'r':
                        l[name][0] = val
                    elif perm == 'w':
                        l[name][1] = val
                    elif perm == 'x':
                        l[name][2] = val

        if 'recursive' in d and d['recursive']:
            cmd = 'setfacl -R -m '
        else:
            cmd = 'setfacl -m '

        ou_str, err = _convert_to_ace_str(d['ou_r'], d['ou_w'], d['ou_x'])
        if err:
            raise Exception(err)
        cmd += 'user::%s,' % ou_str

        og_str, err = _convert_to_ace_str(d['og_r'], d['og_w'], d['og_x'])
        if err:
            raise Exception(err)
        cmd += 'group::%s,' % og_str

        ot_str, err = _convert_to_ace_str(d['ot_r'], d['ot_w'], d['ot_x'])
        if err:
            raise Exception(err)
        cmd += 'other::%s,' % ot_str

        for name, perms_list in users.items():
            perms_str, err = _convert_to_ace_str(
                perms_list[0], perms_list[1], perms_list[2])
            if err:
                raise Exception(err)
            cmd += 'user:%s:%s,' % (name.replace(' ', '\ '), perms_str)
            cmd += 'default:user:%s:%s,' % (name.replace(' ', '\ '), perms_str)

        for name, perms_list in groups.items():
            perms_str, err = _convert_to_ace_str(
                perms_list[0], perms_list[1], perms_list[2])
            if err:
                raise Exception(err)
            cmd += 'group:%s:%s,' % (name.replace(' ', '\ '), perms_str)
            cmd += 'default:group:%s:%s,' % (name.replace(' ',
                                                          '\ '), perms_str)

        if cmd[-1] == ',':
            cmd = cmd[:-1]

        cmd += ' "%s"' % path

        # print cmd
        lines, err = command.get_command_output(cmd)
        if err:
            raise Exception(err)

    except Exception, e:
        return False, 'Error setting ACL entries : %s' % str(e)
    else:
        return True, None


if __name__ == '__main__':
    all_aces, err = get_all_aces('/data/dataset1')
    print 'all aces ', all_aces
    print 'minimal aces ', get_minimal_aces(all_aces)
    print 'mask aces ', get_mask_ace(all_aces)
    print 'user aces ', get_ug_aces(all_aces, None, 'user')
    # print 'user list from aces ', get_ug_list_from_aces(all_aces, 'user')
    print 'new user list ', get_new_ug_list(all_aces, ['ram', 'ram1', 'ram2', 'ram3'], 'group')

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
