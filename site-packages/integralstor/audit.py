import os
import os.path
import urllib
import urllib2

from integralstor_utils import file_processing, config, logs, networking, db
from integralstor import event_notifications, datetime_utils


def audit(audit_code, audit_str, request, system_initiated=False):
    """Record an audit entry in the db

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        if system_initiated is False:
            ip, err = networking.get_client_ip(request.META)
            if err:
                raise Exception(err)
        now, err = datetime_utils.get_epoch(when='now', num_previous_days=0)
        if err:
            raise Exception(er)
        if system_initiated:
            username = 'System'
            source_ip = 'System'
        else:
            username = request.user.username
            source_ip, err = networking.get_client_ip(request.META)
            if err:
                raise Exception(err)
        command_list = []
        cmd = [
            'insert into audit(audit_time, username, source_ip, audit_code, audit_str) values (?,?,?,?,?)', (now, username, source_ip, audit_code, audit_str,)]
        command_list.append(cmd)
        audit_id, err = db.execute_iud(db_path, command_list, get_rowid=True)
        if err:
            raise Exception(err)
        ret, err = event_notifications.record_event_notification_holding(event_id = audit_id, event_type_id=2)
        if err:
            raise Exception(err)

    except Exception, e:
        return False, 'Error performing an audit operation : %s' % str(e)
    else:
        return True, None

def delete_all_audits():
    """Remove all audit entries from the db

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        command_list = []
        cmd = ['delete from audit']
        command_list.append(cmd)
        ret, err = db.execute_iud(db_path, command_list)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error deleting all audits : %s' % str(e)
    else:
        return True, None

def get_entries(audit_id=None, start_time=None):
    """Get either all or a specific audit entry(ies) from the db

    """
    al = []
    try:
        if start_time and audit_id:
            raise Exception('Incompatible parameters passed')
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        if audit_id:
            query = 'select * from audit where audit_id="%d" order by audit_id desc'%int(audit_id)
        else:
            if not start_time:
                query = 'select * from audit order by audit_id desc'
            else:
                query = 'select * from audit where audit_time >= %d order by audit_id desc'%int(start_time)
        rows, err = db.get_multiple_rows(db_path, query)
        if err:
            raise Exception(err)
        if rows:
            for row in rows:
                audit_entry, err = _parse_audit_entry(row)
                if err:
                    raise Exception(err)
                al.append(audit_entry)
    except Exception, e:
        return None, 'Error loading audit entries : %s' % str(e)
    else:
        return al, None


def _parse_audit_entry(entry):
    """Parse a db entry dict from the audit table and return a dict with appropriate fields."""
    try:
        integralstor_action_dict = {
            "create_alert_notification": "Alert notification created.",
            "delete_alert_notification": "Alert notification deleted.",
            "create_audit_notification": "Audit notification created.",
            "delete_audit_notification": "Audit notification deleted.",
            "update_system_datetimezone": "Updated system date/time/timezone",
            'delete_remote_monitoring_server':'Removed remote monitoring server',
            'update_remote_monitoring_server':'Created/updated remote monitoring server',
            "factory_defaults_reset": "Factory defaults reset",
            "delete_certificate": "Deleted a SSL certificate",
            "edit_aces": "Access control entry modified",
            "add_aces": "Access control entry created",
            "delete_ace": "Access control entry removed",
            "create_dir": "Directory created",
            "create_self_signed_certificate": "Created a self signed SSL certificate",
            "upload_certificate": "Uploaded a SSL certificate",
            "add_zfs_spares": "Spare disk(s) added to pool",
            "schedule_zfs_snapshot": "Snapshot scheduling added/modified",
            "remove_zfs_spare": "Spare disk removed from pool",
            "remove_zfs_quota": "Removed ZFS quota",
            "set_zfs_quota": "Set ZFS quota",
            "create_vlan": "Created network VLAN",
            "remove_vlan": "Removed network VLAN",
            "modify_local_user_gid": "Local user's primary group set",
            "modify_local_user_grp_membership": "Local user's group membership modified",
            "create_local_user": "Local user created",
            "create_local_group": "Local group created",
            "delete_local_group": "Local group removed",
            "delete_local_user": "Local user removed",
            "change_local_user_password": "Local user password modified",
            "modify_dir_owner_permissions": "Directory ownership/permissions modified",
            "modify_dir_sticky_bit": "Directory sticky bit modified",
            "modify_cifs_share": "CIFS share modified",
            "delete_cifs_share": "CIFS share removed",
            "create_cifs_share": "CIFS share created",
            "modify_samba_settings": "CIFS authentication settings modified",
            "delete_nfs_share": "NFS share removed",
            "edit_nfs_share": "NFS share modified",
            "create_nfs_share": "NFS share created",
            "create_iscsi_target": "ISCSI target created",
            "delete_iscsi_target": "ISCSI target removed",
            "create_iscsi_lun": "ISCSI LUN created",
            "delete_iscsi_lun": "ISCSI LUN removed",
            "add_iscsi_target_authentication": "ISCSI target authentication added",
            "remove_iscsi_target_authentication": "ISCSI target authentication removed",
            "add_iscsi_acl": "ISCSI ACL added",
            "remove_iscsi_acl": "ISCSI ACL removed",
            "change_service_status": "Service status modified",
            "set_interface_state": "Network interface state modified",
            "edit_interface_address": "Network interface address modified",
            "create_bond": "Network interface bond created",
            "remove_bond": "Network interface bond removed",
            "edit_hostname": "System hostname modified",
            "set_dns_nameservers": "DNS nameservers modified",
            "modify_admin_password": "Administrator password modified",
            "create_zfs_pool": "ZFS pool created",
            "expand_zfs_pool": "ZFS pool expanded",
            "import_zfs_pool": "ZFS pool imported",
            "export_zfs_pool": "ZFS pool exported",
            "scrub_zfs_pool": "ZFS pool scrub initiated",
            "delete_zfs_pool": "ZFS pool removed",
            "edit_zfs_slog": "ZFS pool write cache modified",
            "remove_zfs_slog": "ZFS pool write cache removed",
            "edit_zfs_l2arc": "ZFS pool read cache modified",
            "remove_zfs_l2arc": "ZFS pool read cache removed",
            "edit_zfs_dataset": "ZFS dataset modified",
            "delete_zfs_dataset": "ZFS dataset removed",
            "create_zfs_zvol": "ZFS block device volume created",
            "delete_zfs_zvol": "ZFS block device volume removed",
            "create_zfs_dataset": "ZFS dataset created",
            "create_zfs_snapshot": "ZFS snapshot created",
            "delete_zfs_snapshot": "ZFS snapshot removed",
            "rollback_zfs_snapshot": "ZFS snapshot rolled back",
            "replace_disk_offline_disk": "Disk replacement - old disk offlined",
            "replace_disk_replaced_disk": "Disk replacement - disk replaced successfully",
            "rename_zfs_snapshot": "ZFS snapshot renamed",
            "create_rsync_share": "Created new RSync share ",
            "edit_rsync_share": "Edited RSync share ",
            "delete_rsync_share": "Deleted RSync share ",
            "remove_background_task": "Removed background task ",
            "create_remote_replication": "Created remote replication ",
            "modify_remote_replication": "Modified remote replication ",
            "remove_remote_replication": "Removed remote replication ",
            "task_fail": "Task failed ",
            "task_start": "Task started ",
            "task_complete": "Task completed ",
            "remove_ssh_user_key": "Removed ssh user key ",
            "upload_ssh_user_key": "Uploaded ssh user key ",
            "remove_ssh_host_key": "Removed ssh host key ",
            "upload_ssh_host_key": "Uploaded ssh host key ",
        }

        action_dict = integralstor_action_dict

        d = {}

        d['time'], err = datetime_utils.convert_from_epoch(entry['audit_time'], return_format='str', str_format = '%c', to='local')
        if err:
            raise Exception(err)

        d["ip"] = entry['source_ip']
        d["username"] = entry['username']
        action = entry['audit_code']
        if action in action_dict:
            d["action"] = action_dict[action]
        else:
            d["action"] = "Unknown"
        d["action_str"] = entry['audit_str']
        d["audit_id"] = entry['audit_id']

    except Exception, e:
        return None, 'Error decoding audit entry: %s' % (e)
    else:
        return d, None

def generate_audit_email_body(audit_id):
    """Generate an email body for the specified audit entry

    """
    msg = None
    try:
        ad_list, err = get_entries(audit_id)
        if err:
            raise Exception(err)
        if ad_list:
            ad = ad_list[0]
            msg = ' Audit time: %s\n Performed from: %s\n Performed by: %s\n Action: %s.'%(ad['time'], ad['ip'], ad['username'], ad['action_str'])
    except Exception, e:
        return None, 'Error generating audit email message body : %s' % str(e)
    else:
        return msg, None

def export_old_audits(min_to_export=1000, export_count=500):
    """Export the oldest export_count audits if the total number of audits exceeds min_to_export

    """
    try:
        #print min_to_export, export_count
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        ret, err = db.get_single_row(db_path, 'select count(*) as count from audit')
        if err:
            raise Exception(err)
        if ret['count'] > int(min_to_export):
            query = "select * from audit order by audit_id limit %d;"%int(export_count)
            full_audit_list, err = db.get_multiple_rows(db_path, query)
            if err:
                raise Exception(err)
            #print full_audit_list
            audit_list = []
            for a in full_audit_list:
                #If it is still in the holding table then skip it so it can get processed..
                query = "select * from event_notifications_holding where event_id=%d;"%int(a['audit_id'])
                ret, err = db.get_single_row(db_path, query)
                #print ret, err
                if err:
                    raise Exception(err)
                if not ret:
                    audit_list.append(a)

            #print audit_list
            if audit_list:
                delete_commands = []
                export_dir_name = '/var/log/integralstor/logs/exported_logs'
                if not os.path.exists(export_dir_name):
                    os.makedirs(export_dir_name)
                now, err = datetime_utils.get_epoch(when='now', num_previous_days=0)
                if err:
                    raise Exception(err)
                now_str, err = datetime_utils.convert_from_epoch(now, return_format='str', str_format = '%Y_%m_%d_%H_%M', to='local')
                export_filename = 'audits_%s'%now_str
                with open('%s/%s'%(export_dir_name, export_filename), 'w') as f:
                    f.write('Audit time(UTC)  |  Audit type | Performed by | Performed from | Audit message\n')
                    f.write('-------------------------------------------------------------------------------------------\n')
                    for entry in audit_list:
                        #print entry
                        aud, err = _parse_audit_entry(entry)
                        if err:
                            raise Exception(err)
                        #print aud, err
                        f.write('%s | %s | %s | %s | %s\n\n'%(aud['time'],aud['action'], aud['username'], aud['ip'], aud['action_str']))
                        delete_commands.append(['delete from audit where audit_id="%d"'%int(aud['audit_id'])])
                #print delete_commands
                ret, err = db.execute_iud(db_path, delete_commands)
                if err:
                    raise Exception(err)
    
    except Exception, e:
        return False, 'Error exporting old audits : %s' % str(e)
    else:
        return True, None

if __name__ == "__main__":
    pass
    # print _parse_audit_line('1485241451    192.168.1.53     create_remote_replication Replication of zpool/Unit2 to pool zpool on machine 192.168.1.247. Scheduled for At 12:35')
    # print _parse_audit_line('1485239641    system-initiated task_start
    # Replication of zpool/Unit1 to pool zpool on machine 192.168.1.247')
    #print export_old_audits(min_to_export=0, export_count=500)
    #print _parse_audit_line('1485243283    192.168.1.79     delete_zfs_snapshot       Deleted ZFS snapshot zpool/Unit1@test-dnap-2')


# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
