
import smtplib
import email.utils
import sys
import os
from email.mime.text import MIMEText

from integralstor_utils import config, db
from integralstor import datetime_utils


def create_event_notification_configuration(recipient_list_str):
    """Create an email configuration entry that will be used for a particular trigger.

    """
    enc_id = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        enc_id, err = db.execute_iud(db_path, [["insert into event_notification_configuration_email (recipient_list) values (?)", ( recipient_list_str, )]], get_rowid=True)
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error creating event notification configuration: %s'%str(e)
    else:
        return enc_id, None

def delete_event_notification_configuration(enc_id):
    """Remove an email configuration entry that will be used for a particular trigger.

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        ret, err = db.execute_iud(db_path, [["delete from  event_notification_configuration_email where enc_id='%d'"%int(enc_id)]])
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error deleting event notification configuration : %s' % str(e)
    else:
        return True, None

def get_event_notification_configuration(enc_id):
    """Get a particular email configuration..

    """
    ret = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        ret, err = db.get_single_row(
            db_path, "select * from event_notification_configuration_email where enc_id = %d"%enc_id)
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error retrieving email notification configuration : %s' % str(e)
    else:
        return ret, None

def load_email_settings():
    """Load the email server settings

    """
    conn = None
    d = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        d, err = db.get_single_row(
            db_path, "select * from email_config where id = 1")
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error loading email settings : %s' % str(e)
    else:
        return d, None
    finally:
        if conn:
            conn.close()


def save_email_settings(d):
    """Save the email server settings

    """
    conn = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        d1, err = db.get_single_row(db_path, "select * from email_config")
        if err:
            raise Exception(err)
        if d1:
            # Config exists so update
            ret, err = db.execute_iud(db_path, [["update email_config set server=?, port=?, username=?, pswd=?, tls=? where id = ?", (
                d["server"], d["port"], d["username"], d["pswd"], d["tls"], 1,)]])
            if err:
                raise Exception(err)

        else:
            # No config exists so insert
            ret, err = db.execute_iud(db_path, [["insert into email_config (server, port, username, pswd, tls, id) values (?,?,?,?,?,?)", (
                d["server"], d["port"], d["username"], d["pswd"], d["tls"], 1, )]])
            if err:
                raise Exception(err)
    except Exception, e:
        return False, 'Error saving email settings : %s' % str(e)
    else:
        return True, None


def delete_email_settings():
    """Remove the email server settings

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        ret, err = db.execute_iud(db_path, [["delete from  email_config "]])
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error deleting email settings : %s' % str(e)
    else:
        return True, None

def enqueue(recipients, subject, body, attachment_file_location = None, delete_attachment_file = True):
    """Enter an entry into the email queue table

    """
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        now, err = datetime_utils.get_epoch(when='now', num_previous_days=0)
        if err:
            raise Exception(er)
        command_list = []
        if attachment_file_location:
            cmd = [
                'insert into email_queue(recipients, subject, body, attachement_file_location, delete_attachment_file, create_time, status) values (?,?,?,?,?,?,?)', (recipients, subject, body, attachment_file_location, delete_attachment_file, now, 1,)]
        else:
            cmd = [
                'insert into email_queue(recipients, subject, body, create_time, status) values (?,?,?,?,?)', (recipients, subject, body, now, 1,)]
        command_list.append(cmd)
        ret, err = db.execute_iud(db_path, command_list)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error enqueuing email: %s' % str(e)
    else:
        return True, None

def get_queued_emails():
    """Get all entries in the email_queue table

    """
    eq_list = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        query = "select * from email_queue where status in (1,2)"
        eq_list, err = db.get_multiple_rows(db_path, query)
        if err:
            raise Exception(err)
    except Exception, e:
        return None, 'Error retrieving queued emails: %s' % str(e)
    else:
        return eq_list, None

def process_email_queue():
    """Send out all the mails that are pending in the email_queue table and update the status accordingly.

    """
    try:
        d, err = load_email_settings()
        if err:
            raise Exception(err)
        if d:
            eq_list, err = get_queued_emails()
            #print eq_list, err
            if err:
                raise Exception(err)
            if eq_list:
                db_path, err = config.get_db_path()
                if err:
                    raise Exception(err)
                now, err = datetime_utils.get_epoch(when='now', num_previous_days=0)
                if err:
                    raise Exception(er)
                for eq_entry in eq_list:
                    result, err = send_mail(d['server'], d['port'], d['username'], d['pswd'], d['tls'], eq_entry['recipients'], eq_entry['subject'], eq_entry['body'])
                    if err:
                        if eq_entry['attempts'] == 2:
                            #Failed
                            cmd = ['update email_queue set attempts=2, status=3, last_process_time="%s", error_message="%s" where eq_id=%d' %(now, err, eq_entry['eq_id'])]
                        else:
                            #Retry once more
                            cmd = ['update email_queue set attempts=%d, status=2, last_process_time="%s", error_message="%s" where eq_id=%d' %(((int)(eq_entry['attempts'])+1), now, err, eq_entry['eq_id'])]
                    else:
                        #Success
                        cmd = ['update email_queue set status=0, last_process_time="%s" where eq_id=%d' %(now, eq_entry['eq_id'])]
                    ret, err = db.execute_iud(db_path, [cmd])
                    if err:
                        raise Exception(err)
    except Exception, e:
        return False, 'Error processing email queue: %s' % str(e)
    else:
        return True, None

def purge_email_queue(older_than_days):
    try:
        cutoff_seconds, err = datetime_utils.get_epoch(when='now', num_previous_days=older_than_days)
        if err:
            raise Exception(err)
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        delete_command_list = [["delete from email_queue where create_time < %d;"%cutoff_seconds]]
        ret, err = db.execute_iud(db_path, delete_command_list)
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error purging email queue database: %s' % str(e)
    else:
        return True, None

def send_mail(server, port, username, pswd, tls, rcpt_list, header, body):
    """Actually send an email

    """

    ms = None
    try:
        msg = MIMEText(body)
        msg.set_unixfrom('Integralstor Alerting System')

        if ',' in rcpt_list:
            emails = rcpt_list.split(',')
        else:
            emails = rcpt_list.split(' ')
        to = ','.join(emails)
        # print to
        msg['From'] = email.utils.formataddr(
            ('IntegralView alerting system', "%s@%s" % (username, server)))
        msg['Subject'] = header
        msg['to'] = to
        # print "Sending msg with header \'%s\' and body\' %s\' to %s"%(header,
        # body, emails)

        # print "Opening connection to %s %d"%(server.strip(), port)
        ms = smtplib.SMTP(server, port)
        # print "Opened connection"
        ms.set_debuglevel(True)
        ms.ehlo()
        if tls:
            if ms.has_extn('STARTTLS'):
                ms.starttls()
                ms.ehlo()
        ms.login(username, pswd)
        ms.sendmail('%s@%s' % (username, server), emails, msg.as_string())
    except Exception, e:
        return False, 'Error sending email : %s' % str(e)
    else:
        return True, None
    finally:
        if ms:
            ms.quit()


def main():
    # print "deleting"
    #d = delete_email_settings()
    #d, err = load_email_settings()
    # print d
    # print "creating"
    #save_email_settings({"server":"new", "port":22, "username":"newuser", "pswd":"newpass", "tls":True, "email_alerts":False, "rcpt_list":"1@1.com, 2@2.com"})
    # print "created"
    #d,err = load_email_settings()
    # print d['email_alerts']
    # if d["tls"]:
    #  print "tls true"
    # if d["email_alerts"]:
    #  print "email_alerts true"
    # print "updating"
    #save_email_settings({"server":"new1", "port":23, "username":"newuser1", "pswd":"newpass1", "tls":False, "email_alerts":True, "rcpt_list":"11@1.com, 12@2.com"})
    # print "updated"
    #d = load_email_settings()
    # print d
    # if d["tls"]:
    #  print "tls true"
    # if d["email_alerts"]:
    #  print "email_alerts true"
    # print "deleting"
    #d = delete_email_settings()
    #d = load_email_settings()
    # print d
    # print send_mail("testhdr", "testbdy")
    #print process_email_queue()
    #print purge_email_queue(1)
    pass
    #print send_mail(d['server'], d['port'], d['username'], d['pswd'], d['tls'], d['rcpt_list'], "A Test Header", "Hello World")


if __name__ == "__main__":
    main()


# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
