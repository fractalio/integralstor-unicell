import os
import shutil
from integralstor import config, command

"""
Ramdisks can be used as the slog for battery backed systems. This file has utilities to create, destroy and manage ramdisks.
"""


"""
Get memory stats for use in ramdisks
"""


def get_mem_stats(units):
    mem = None
    try:
        if units not in ['MB', 'GB']:
            raise Exception('Incorrect units requested')
        if not units:
            raise Exception('Units not specified in request')
        if units == 'MB':
            flag = '-m'
        elif units == 'GB':
            flag = '-g'
        cmd = 'free %s' % flag
        lines = None
        lines, err = command.get_command_output(cmd)
        if err:
            raise Exception('Error getting free memory: %s' % err)

        if lines:
            for line in lines:
                if 'Mem:' not in line:
                    continue
                components = line.split()
                mem = {}
                mem['total'] = float(components[1])
                mem['used'] = float(components[2])
                mem['free'] = float(components[3])
    except Exception, e:
        return None, 'Error retriving free memory : %s' % str(e)
    else:
        return mem, None


"""
Get the current ramdisks configured. The configuration is stored in the ramdisks.conf file.
"""


def get_ramdisks_config():
    ramdisks = []
    try:
        lines = None
        product_root, err = config.get_product_root()
        if err:
            raise Exception(err)
        if not product_root:
            raise Exception('Could not determine product root')
        with open('%s/ramdisks.conf' % product_root, 'r') as f:
            lines = f.readlines()
        if lines:
            for line in lines:
                components = line.split()
                if len(components) < 3:
                    raise Exception('Invalid ramdisk format')
                r = {}
                r['pool'] = components[0]
                r['path'] = components[1]
                r['size'] = float(components[2])
                ramdisks.append(r)

    except Exception, e:
        return None, 'Error getting existing ramdisk info: %s' % str(e)
    else:
        return ramdisks, None


"""
Get the total size consumed by all the ramdisks.
"""


def get_total_ramdisks_size():
    size = 0
    try:
        ramdisks, err = get_ramdisks_config()
        if err:
            raise Exception(err)
        if not ramdisks:
            if err:
                raise Exception(err)
            else:
                size = 0
        else:
            for r in ramdisks:
                size += r['size']

    except Exception, e:
        return -1, 'Error getting total ramdisks size : %s' % str(e)
    else:
        return size, None


"""
Insert into the ramdisk file. The ramdisk service will use this file to start/stop the ramdisk.
"""


def insert_into_ramdisks_config(pool, path, size):
    try:
        product_root, err = config.get_product_root()
        if err:
            raise Exception(err)
        with open('%s/ramdisks.conf' % product_root, 'a') as f:
            f.write('%s %s %s\n' % (pool, path, size))
            f.flush()
    except Exception, e:
        return False, 'Error updating ramdisk config info: %s' % str(e)
    else:
        return True, None


"""
Remove from the ramdisk file. The ramdisk service will use this file to start/stop the ramdisk.
"""


def delete_from_ramdisks_config(pool, path):
    try:
        product_root, err = config.get_product_root()
        if err:
            raise Exception(err)
        ramdisks, err = get_ramdisks_config()
        if err:
            raise Exception(err)
        if ramdisks:
            new_ramdisks = []
            for r in ramdisks:
                if r['path'] == path and r['pool'] == pool:
                    continue
                else:
                    new_ramdisks.append(r)
            with open('/tmp/ramdisks.conf', 'w') as f:
                for r in new_ramdisks:
                    f.write('%s %s %s\n' % (r['pool'], r['path'], r['size']))
                    f.flush()
            shutil.move('/tmp/ramdisks.conf', '%s/ramdisks.conf' %
                        product_root)
        else:
            raise Exception('Specified ramdisk not found')

    except Exception, e:
        return None, 'Error removing ramdisk from config file : %s' % str(e)
    else:
        return ramdisks, None


"""
Given a path, get the config for the ramdisk at that path from the config file.
"""


def get_ramdisk_info(path):
    d = None
    try:
        ramdisks, err = get_ramdisks_config()
        if err:
            raise Exception(err)
        if ramdisks:
            for r in ramdisks:
                if r['path'] == path:
                    d = r
                    break
    except Exception, e:
        return None, 'Error getting ramdisk info : %s' % str(e)
    else:
        return d, None


"""
Create a ramdisk of the given spec and insert the spec details into ramdisks.conf for start/stop 
"""


def create_ramdisk(size, path, pool):
    try:
        if not size:
            raise Exception('Size not specified')

        mem, err = get_mem_stats('MB')
        if err:
            raise Exception(err)
        if not mem:
            raise Exception('Error getting memory information : %s' % err)

        used, err = get_total_ramdisks_size()
        if err:
            raise Exception(err)
        if used < 0:
            raise Exception('Error checking RAM size')

        if (used + size) / mem['total'] > 0.25:
            raise Exception('Insufficient memory ')

        if not os.path.exists(path):
            os.makedirs(path)

        cmd = 'mount -t tmpfs -o size=%dm tmpfs %s' % (size, path)
        lines, err = command.get_command_output(cmd)
        if err:
            raise Exception('Error creating ramdisk : %s' % err)

        cmd = 'dd if=/dev/zero of=%s/ramfile bs=1024 count=%dK' % (path, size)
        lines, err = command.get_command_output(cmd)
        if err:
            raise Exception('Error initializing ramdisk : %s' % err)

        res, err = insert_into_ramdisks_config(pool, path, size)
        if err or not res:
            cmd = 'umount %s' % path
            lines, err1 = command.get_command_output(cmd)
            if err1:
                if err:
                    err += err1
                    raise Exception(err)
                else:
                    raise Exception(err1)
            else:
                raise Exception(err)

    except Exception, e:
        return False, 'Error creating ramdisk : %s' % str(e)
    else:
        return True, None


"""
Destroy the specified ramdisk and delete the spec details from ramdisks.conf for start/stop 
"""


def delete_ramdisk(path, pool):
    try:
        if not path:
            raise Exception('No RAMDisk path specified')
        res, err = delete_from_ramdisks_config(pool, path)
        if err:
            raise Exception(err)
        if not res:
            raise Exception("Error removing ramdisk info from the conf file")
        cmd = 'umount %s' % path
        lines, err = command.get_command_output(cmd)
        if err:
            raise Exception('Error creating ramdisk : %s' % err)
        (ret, rc), err = command.execute_with_rc(cmd)
        if err:
            raise Exception('Error unmounting ramdisk : %s' % err)
    except Exception, e:
        return False, 'Error destroying ramdisk : %s' % str(e)
    else:
        return True, None


def main():
    # print get_mem_stats('MB')
    # print get_ramdisks_info()
    # print create_ramdisk(2, 'ramdisk1', 'pool1')
    # raw_input('press to continue')
    # print delete_ramdisk('ramdisk1', 'pool1')
    pass


if __name__ == '__main__':
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
