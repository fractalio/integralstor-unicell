import json
import uuid as UUID

from integralstor import zfs, config, zfs, db


def load_system_config(first_time=False):

    return_dict = {}
    try:
        if first_time:
            system_status_path, err = config.get_tmp_path()
            if err:
                raise Exception(err)
        else:
            system_status_path, err = config.get_system_status_path()
            if err:
                raise Exception(err)

        msfn = "%s/master.status" % system_status_path
        mmfn = "%s/master.manifest" % system_status_path

        try:
            with open(msfn, "r") as f:
                status_dict = json.load(f)
            with open(mmfn, "r") as f:
                manifest_dict = json.load(f)
        except IOError:
            raise Exception('file-not-found')

        # First load the return dict with the manifest keys
        return_dict = manifest_dict.copy()

        for k in return_dict.keys():
            if k in status_dict.keys():
                if k in ['disks', 'interfaces', 'memory']:
                    for component in return_dict[k].keys():
                        if component in status_dict[k].keys():
                            for component_key in status_dict[k][component].keys():
                                if component_key not in return_dict[k][component].keys():
                                    return_dict[k][component][component_key] = status_dict[k][component][component_key]
        for k in status_dict.keys():
            if k not in return_dict.keys():
                return_dict[k] = status_dict[k]

    except Exception, e:
        if str(e) is "file-not-found":
            return None, '<a href="/update_manifest"> <h4>System configuartion not loaded, click here to regenerate.</h4></a>'
        else:
            return None, 'Error loading system configuration : %s' % str(e)
    else:
        return return_dict, None


def delete_integralstor_uuid():
    """Clear Integralstor's UUID fields

    args:       None
    returns:    Bool: True if successful, False otherwise
    """
    is_del = False
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)

        cmd = "delete from integralstor_info"
        row_id, err = db.execute_iud(
            db_path, [[cmd], ], get_rowid=False)
        if err:
            raise Exception(err)
        is_del = True

    except Exception, e:
        return None, 'Could not delete UUID: %s' % e
    else:
        return is_del, None


def set_integralstor_uuid(regenerate=False):
    """Set Integralstor's UUID fields

    args:       Bool:regenerate
    returns:    dict with keys 'uuid_hex' & 'uuid_str'

    """
    ret_id = None
    try:
        uuid = None
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        uuid, err = get_integralstor_uuid()
        if err:
            raise Exception(err)
        if uuid and regenerate is False:
            # UUID is already set, do not regenerate
            ret_id = uuid

        if not uuid or regenerate is True:
            # Generate UUID
            uuid = UUID.uuid1()

            # Clear the existing entry from the table
            is_del, err = delete_integralstor_uuid()
            if err:
                raise Exception('Could not clear the existing entry: %s' % err)

            cmd = "insert into integralstor_info (uuid_hex,uuid_str) values ('%s','%s')" % (
                str(uuid.hex), str(uuid))
            row_id, err = db.execute_iud(
                db_path, [[cmd], ], get_rowid=True)
            if err:
                raise Exception(err)
            ret_id = {}
            ret_id['uuid_hex'] = str(uuid.hex)
            ret_id['uuid_str'] = str(uuid)

    except Exception, e:
        return None, 'Could not set UUID: %s' % e
    else:
        return ret_id, None


def get_integralstor_uuid():
    """Return Integralstor's UUID fields

    args:       None
    returns:    dict with keys 'uuid_hex' & 'uuid_str'

    """
    id_dict = None
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)

        cmd = "select * from integralstor_info"
        ret, err = db.get_single_row(db_path, cmd)
        if err:
            raise Exception(err)
        if ret:
            # return the dict which has all the fields
            id_dict = ret
    except Exception, e:
        return None, 'Could not fetch UUID: %s' % e
    else:
        return id_dict, None


def get_org_info():
    """Return organization's information

    args:       None
    returns:    dict with keys-
                    'org_name',
                    'unit_name',
                    'unit_id',
                    'subunit_name',
                    'subunit_id'
    """
    ret_dict = {}
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)

        cmd = "select * from org_info"
        ret, err = db.get_single_row(db_path, cmd)
        if err:
            raise Exception(err)
        if ret:
            # return the dict which has all the fields
            ret_dict = ret

    except Exception, e:
        return None, 'Could not fetch details of the organisation: %s' % e
    else:
        return ret_dict, None


def delete_org_info():
    """Clear organization information

    args:       None
    returns:    Bool: True if successful, False otherwise
    """
    is_del = False
    try:
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)

        cmd = "delete from org_info"
        row_id, err = db.execute_iud(
            db_path, [[cmd], ], get_rowid=False)
        if err:
            raise Exception(err)
        is_del = True

    except Exception, e:
        return None, 'Could not delete org info: %s' % e
    else:
        return is_del, None


def update_org_info(info_dict):
    """Return organization's information

    args:       dict with keys-
                    'org_name',
                    'unit_name',
                    'unit_id',
                    'subunit_name',
                    'subunit_id'
    returns:    Bool    
    """
    is_update = False
    try:
        if not info_dict:
            raise Exception('Dict with org info fields required')
        db_path, err = config.get_db_path()
        if err:
            raise Exception(err)
        fields = ['org_name',
                  'unit_name',
                  'unit_id',
                  'subunit_name',
                  'subunit_id']
        for field in fields:
            if field not in info_dict.keys():
                raise Exception('%s is a required parameter' % field)

        # clear existing info
        is_del, err = delete_org_info()
        if err:
            raise Exception('Could not clear the existing entry: %s' % err)

        cmd = "insert into org_info (org_name,unit_name,unit_id,subunit_name,subunit_id) values ('%s','%s','%s','%s','%s')" % (
            info_dict['org_name'], info_dict['unit_name'], info_dict['unit_id'], info_dict['subunit_name'], info_dict['subunit_id'])
        row_id, err = db.execute_iud(
            db_path, [[cmd], ], get_rowid=True)
        if err:
            raise Exception(err)
        is_update = True

    except Exception, e:
        return None, 'Could not fetch details of the organisation: %s' % e
    else:
        return is_update, None


if __name__ == '__main__':
    """
    ret, err = get_integralstor_uuid()
    print ret, err
    ret, err = delete_integralstor_uuid()
    print ret, err
    ret, err = set_integralstor_uuid()
    print ret, err
    ret, err = set_integralstor_uuid(regenerate=True)
    print ret, err
    """
    ret, err = get_org_info()
    print ret, err

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
