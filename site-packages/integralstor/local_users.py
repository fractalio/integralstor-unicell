import sys
import os
import pwd
import crypt
import grp
import spwd

from integralstor import command, config


def create_local_user(username, name, pswd, gid=None, smb_user=True):

    try:

        # First check if user exists. if so kick out
        ul, err = get_local_users()
        if ul:
            for ud in ul:
                if ud["username"] == username:
                    raise Exception(
                        "Error creating user. The user \"%s\" already exists. " % username)
        elif err:
            raise Exception("Error retrieving user list : %s" % err)

        enc_pswd = crypt.crypt(pswd, "28")
        use_salt, err = config.use_salt()
        if err:
            raise Exception(err)
        if use_salt:
            import salt.client
            client = salt.client.LocalClient()
            if gid:
                rc = client.cmd('*', 'user.add', [username, None, gid])
            else:
                rc = client.cmd('*', 'user.add', [username])
            # print rc
            if not rc:
                error_list.append("Error creating the username")
            for hostname, status in rc.items():
                if not status:
                    error_list.append(
                        "Error creating the username on node" % hostname)
            rc = client.cmd('*', 'shadow.set_password', [username, enc_pswd])
            for hostname, status in rc.items():
                if not status:
                    error_list.append(
                        "Error setting the password for username on GRIDCell %s" % hostname)
            rc = client.cmd('*', 'user.chfullname',
                            [username, "integralstor_user_%s" % name])
            for hostname, status in rc.items():
                if not status:
                    error_list.append(
                        "Error setting the name for username on node %s" % hostname)
        else:
            # print '1'
            if gid:
                cmd_to_run = 'useradd -g %s -p %s -c integralstor_user_%s %s' % (
                    gid, enc_pswd, name, username)
            else:
                cmd_to_run = 'useradd  -p %s -c integralstor_user_%s %s' % (
                    enc_pswd, name, username)
            lines, err = command.get_command_output(cmd_to_run)
            # print '2'
            # print lines, err
            if err:
                raise Exception(err)

        if smb_user:
            # print '/usr/bin/pdbedit  -d 1 -t -a  -u %s -f %s'%(username, name), "%s\n%s"%(pswd, pswd)
            # Now all set to create samba user
            # print '3'
            #lines, err = command.get_command_output(r'/usr/bin/pdbedit  -d 1 -t -a  -u %s -f %s'%(username, name), "%s\n%s"%(pswd, pswd))
            (ret, rc), err = command.execute_with_conf_and_rc(
                r'/usr/bin/pdbedit  -d 1 -t -a  -u %s -f %s' % (username, name), "%s\n%s" % (pswd, pswd))
            if rc == 0:
                lines, er = command.get_output_list(ret)
                if er:
                    raise Exception(er)
            else:
                err = ''
                tl, er = command.get_output_list(ret)
                if er:
                    raise Exception(er)
                if tl:
                    err = ','.join(tl)
                tl, er = command.get_error_list(ret)
                if er:
                    raise Exception(er)
                if tl:
                    err = err + ','.join(tl)
                raise Exception(err)
            # print '4'
            # print lines, err
    except Exception, e:
        return False, 'Error creating local user : %s' % str(e)
    else:
        return True, None


def create_local_group(grpname, gid=None):
    try:
        # First check if groups exists. if so kick out
        gl, err = get_local_groups()
        if gl:
            for gd in gl:
                if gd["grpname"] == grpname:
                    raise Exception(
                        "Error creating group. The group \"%s\" already exists. " % grpname)
        elif err:
            raise Exception("Error retrieving group list : %s" % err)

        use_salt, err = config.use_salt()
        if err:
            raise Exception(err)
        if use_salt:
            import salt.client
            client = salt.client.LocalClient()
            if not gid:
                rc = client.cmd('*', 'group.add', [grpname])
            else:
                rc = client.cmd('*', 'group.add', [grpname, gid])
            print rc
            if not rc:
                raise Exception('Group creation failed')
            for hostname, status in rc.items():
                if not status:
                    raise Exception('Group creation failed')
        else:
            if gid:
                cmd_to_run = 'groupadd  -g %s %s' % (gid, grpname)
            else:
                cmd_to_run = 'groupadd   %s' % (grpname)
            lines, err = command.get_command_output(cmd_to_run)
            if err:
                raise Exception(err)
    except Exception, e:
        return False, 'Error creating a local group : %s' % str(e)
    else:
        return True, None


def set_local_user_gid(d):
    try:
        if 'username' not in d:
            raise Exception('Unknown user')
        ud, err = get_local_user(d['username'])
        if err:
            raise Exception('Error looking up user information : %s' % err)
        if not ud:
            raise Exception('Specified user information not found.')
        lines, err = command.get_command_output(
            r'usermod  -g %s %s' % (d['gid'], d['username']))
        if err:
            raise Exception(err)

    except Exception, e:
        return False, 'Error setting local user group : %s' % str(e)
    else:
        return True, None


def set_local_user_group_membership(d):
    try:
        if 'username' not in d:
            raise Exception('Unknown user')
        ud, err = get_local_user(d['username'])
        if err:
            raise Exception('Error looking up user information : %s' % err)
        if not ud:
            raise Exception('Specified user information not found.')
        glist = None
        if 'groups' in d:
            glist = d['groups']
        if not glist:
            glist = []
            glist.append(ud['grpname'])

        lines, err = command.get_command_output(
            r'usermod  -G %s %s' % (','.join(glist), d['username']))
        if err:
            raise Exception(err)

    except Exception, e:
        return False, "Error setting local user's additional groups : %s" % str(e)
    else:
        return True, None


def delete_local_user(username):

    try:
        if not username:
            raise Exception('No username specified')
        d, err = get_local_user(username)
        if not d:
            if err:
                raise Exception('Error locating user : %s' % err)
            else:
                raise Exception('Error locating user')

        use_salt, err = config.use_salt()
        if err:
            raise Exception(err)
        if use_salt:
            import salt.client
            client = salt.client.LocalClient()
            rc = client.cmd('*', 'user.delete', [username])
            # print rc
            if rc:
                for hostname, status in rc.items():
                    if not status:
                        raise Exception("Error deleting the system user")
            else:
                raise Exception("Error deleting the system user")
        else:
            cmd_to_run = 'userdel  %s' % (username)
            lines, err = command.get_command_output(cmd_to_run)
            if err:
                raise Exception(err)

        if d['smb_user']:
            lines, err = command.get_command_output(
                r'pdbedit -d 1 -x %s' % username)
            if err:
                raise Exception(err)

    except Exception, e:
        return False, 'Error deleting local user : %s' % str(e)
    else:
        return True, None


def delete_all_local_users():
    try:
        user_list, err = get_local_users()
        if err:
            raise Exception(err)
        for user_dict in user_list:
            ret, err = delete_local_user(user_dict['username'])
            if err:
                raise Exception(err)
    except Exception, e:
        return False, 'Error deleting all local users : %s' % str(e)
    else:
        return True, None


def delete_local_group(grpname):

    try:
        if not grpname:
            raise Exception('No username specified')
        d, err = get_local_group(grpname)
        if not d:
            if err:
                raise Exception('Error locating group : %s' % err)
            else:
                raise Exception('Error locating group')

        use_salt, err = config.use_salt()
        if err:
            raise Exception(err)
        if use_salt:
            import salt.client
            client = salt.client.LocalClient()
            rc = client.cmd('*', 'group.delete', [grpname])
            # print rc
            if rc:
                for hostname, status in rc.items():
                    if not status:
                        raise Exception("Error deleting the system group")
            else:
                raise Exception("Error deleting the system group")
        else:
            cmd_to_run = 'groupdel  %s' % (grpname)
            lines, err = command.get_command_output(cmd_to_run)
            if err:
                raise Exception(err)

    except Exception, e:
        return False, 'Error deleting local group : %s' % str(e)
    else:
        return True, None


def delete_all_local_groups():
    try:
        group_list, err = get_local_groups()
        if err:
            raise Exception(err)
        for group_dict in group_list:
            ret, err = delete_local_group(group_dict['grpname'])
            if err:
                raise Exception(err)
    except Exception, e:
        return False, 'Error deleting all local groups : %s' % str(e)
    else:
        return True, None


def change_password(username, pswd):
    try:
        if not username:
            raise Exception('No username specified')
        d, err = get_local_user(username)
        if not d:
            if err:
                raise Exception('Error locating user : %s' % err)
            else:
                raise Exception('Error locating user')
        lines, err = command.get_command_output(
            r'echo %s:%s|chpasswd' % (username, pswd), shell=True)
        if err:
            raise Exception(err)

        if 'smb_user' in d and d['smb_user']:
            #lines, err = command.get_command_output(r'smbpasswd -s %s'%(username), "%s\n%s"%(pswd, pswd))
            (ret, rc), err = command.execute_with_conf_and_rc(
                r'smbpasswd -s %s' % (username), "%s\n%s" % (pswd, pswd))
            if rc == 0:
                lines, er = command.get_output_list(ret)
                if er:
                    raise Exception(er)
            else:
                err = ''
                tl, er = command.get_output_list(ret)
                if er:
                    raise Exception(er)
                if tl:
                    err = ','.join(tl)
                tl, er = command.get_error_list(ret)
                if er:
                    raise Exception(er)
                if tl:
                    err = err + ','.join(tl)
                raise Exception(err)
    except Exception, e:
        return False, 'Error changing local user password : %s' % str(e)
    else:
        return True, None


def get_local_group(grp, by_name=True, grp_list=None):
    ret = None
    try:
        if not grp:
            raise Exception('No group id or name specified')
        if not grp_list:
            grp_list, err = get_local_groups()
        if not grp_list:
            if err:
                raise Exception('Error retrieving group list : %s' % err)
            else:
                raise Exception('Specified group not found')
        for gd in grp_list:
            if by_name:
                search_term = gd['grpname']
            else:
                search_term = gd['gid']
            if search_term == grp:
                ret = gd
                break
    except Exception, e:
        return None, 'Error retrieving local group : %s' % str(e)
    else:
        return ret, None


def get_local_groups(get_system_groups=False):
    grp_list = []
    try:
        all = grp.getgrall()
        min_gid, err = config.get_minimum_user_uid_gid('group')
        if err:
            raise Exception(err)
        for g in all:
            if not get_system_groups:
                if g.gr_gid < min_gid or g.gr_gid >= 65534:
                    continue
            d = {}
            d['grpname'] = g.gr_name
            d['gid'] = g.gr_gid
            d['members'] = g.gr_mem
            ul, err = get_local_users()
            if err:
                raise Exception(err)
            if ul:
                for u in ul:
                    if u['gid'] == d['gid'] and u['username'] not in d['members']:
                        d['members'].append(u['username'])

            grp_list.append(d)
    except Exception, e:
        None, 'Error retrieving local groups : %s' % str(e)
    else:
        return grp_list, None


def get_local_user(user, by_name=True, user_list=None):
    ret = None
    try:
        if not user:
            raise Exception('No user id or name specified')
        if not user_list:
            user_list, err = get_local_users()
        if not user_list:
            if err:
                raise Exception('Error retrieving user list : %s' % err)
            else:
                raise Exception('Specified user not found')
        for ud in user_list:
            if by_name:
                search_term = ud['username']
            else:
                search_term = ud['uid']
            if search_term == user:
                ret = ud
                break
        if ret:
            gd, err = get_local_group(ret['gid'], False)
            '''
      if err:
        raise Exception(err)
      '''
            if gd:
                ret['grpname'] = gd['grpname']
            else:
                ret['grpname'] = 'System group'
    except Exception, e:
        return None, 'Error retrieving local user : %s' % str(e)
    else:
        return ret, None


def get_local_users(get_system_users=False):
    user_list = []
    try:
        sys_ul = []
        smb_ul = []
        all = pwd.getpwall()
        # print all
        min_uid, err = config.get_minimum_user_uid_gid('user')
        if err:
            raise Exception(err)
        for user in all:
            if not get_system_users:
                if user.pw_uid < min_uid or user.pw_uid >= 65534:
                    continue
            sys_ul.append(user.pw_name)
            d = {}
            d['uid'] = user.pw_uid
            d['gid'] = user.pw_gid
            d['home_dir'] = user.pw_dir
            d['username'] = user.pw_name
            d['comment'] = user.pw_gecos
            d['shell'] = user.pw_shell
            g = grp.getgrgid(d['gid'])
            if g:
                d['grpname'] = g.gr_name
            groups = [g.gr_name for g in grp.getgrall() if d['username']
                      in g.gr_mem and g.gr_gid != d['gid']]
            gid = pwd.getpwnam(d['username']).pw_gid
            d['other_groups'] = groups
            user_list.append(d)
        ul, err = command.get_command_output("/usr/bin/pdbedit -d 1 -L")
        if err:
            raise Exception(err)
        # print '1'

        if ul:
            smb_ul = []
            smb_dict = {}
            for u in ul:
                l = u.split(':')
                if l:
                    if len(l) > 1:
                        smb_dict['name'] = l[2]
                    smb_ul.append(l[0])
        if user_list:
            for ud in user_list:
                if ud['username'] in smb_ul:
                    ud['smb_user'] = True
                    if ud['username'] in smb_dict:
                        ud['smb_comment'] = smb_dict[ud['username']]
                else:
                    ud['smb_user'] = True
                    ud['smb_user'] = False
    except Exception, e:
        return None, 'Error retrieving local users : %s' % str(e)
    else:
        return user_list, None


def set_group_membership(grpname, member_users):
    # Given a group name and a set of users who should be its members, modify
    # the system setup to reflect this.
    try:
        gd, err = get_local_group(grpname)
        if err or (not gd):
            if err:
                raise Exception(err)
            else:
                raise Exception("Could not retrieve group information")
        all_users, err = get_local_users()
        if err:
            raise Exception(err)
        for user in all_users:
            modified = False
            existing_groups = user['other_groups']
            new_groups = existing_groups
            # primary group always needs to be there
            new_groups.append(user['grpname'])
            if grpname not in existing_groups:
                if user['username'] in member_users:
                    # Add this group to the user
                    print 'adding ', user['username']
                    new_groups.append(grpname)
                    modified = True
            else:
                # This user is part of the group currently so check if (s)he is
                # being removed
                if user['username'] not in member_users and user['grpname'] != grpname:
                    # Delete this group from the user
                    print 'deleting ', user['username']
                    modified = True
                    new_groups.remove(grpname)
            if modified:
                cmd = 'usermod -G %s %s' % (','.join(new_groups),
                                            user['username'])
                print cmd
                lines, err = command.get_command_output(cmd)
                if err:
                    raise Exception(err)

    except Exception, e:
        return False, 'Error setting group membership : %s' % str(e)
    else:
        return True, None


def main():
    #change_password("bkrram", "ram1")
    # delete_local_user("ram2")
    # print get_samba_users()
    # print get_local_users()
    # print get_local_groups()
    # print get_local_group('ram')
    print get_local_user('ram')


if __name__ == "__main__":
    main()

'''
  error_list = []
  #First check if samba user exists. if so kick out
  ul = get_local_users()
  found = False
  if ul:
    for ud in ul:
      if ud["userid"] == userid:
        found = True
  if not found:
    raise Exception("Error deleting user. The user \"%s\" does not exist. "%userid)

  # Now check if system user exists. If so and is created by integralstor then delete..
  delete_system_user = False
  try:
    d = pwd.getpwnam(userid)
    name = d[4]
    if name.find("integralstor_user") == 0:
      delete_system_user = True
  except KeyError:
    pass

  if delete_system_user:
    #print "Deleting user %s from the system"%userid
    (ret, rc), err = command.execute_with_rc(r'userdel %s'%userid)
    if err:
      raise Exception(err)
    if rc != 0:
      err = ''
      tl, er = command.get_output_list(ret)
      if er:
        raise Exception(er)
      if tl:
        err = ','.join(tl)
      tl, er = command.get_error_list(ret)
      if er:
        raise Exception(er)
      if tl:
        err = err + ','.join(tl)
      raise Exception("Return code : %d. Error : %s"%(rc, err))
    #print "Deleted user %s from the system"%userid
    client = salt.client.LocalClient()
    rc = client.cmd('*', 'user.delete', [userid] )
    for hostname, status in rc.items():
      if not status:
        error_list.append("Error deleting the userid on GRIDCell %s"%hostname)

  #print "Deleting user %s from the storage system"%userid
  (ret, rc), err = command.execute_with_rc(r'pdbedit -d 1 -x %s'%userid)
  if rc != 0:
    raise Exception("Error deleting user from the storage system. Return code : %d. "%rc)
  #print "Deleted user %s from the storage system"%userid
  return error_list
'''

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
