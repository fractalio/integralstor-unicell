import shutil
import os
from integralstor import services_management, config, local_users


def load_exports_list():
    ''' Return a list of all NFS exports defined in /etc/exports '''
    l = []
    try:
        with open('/etc/exports', 'r') as f:
            for line in f:
                if line.startswith('/var/log'):
                    continue
                d, err = process_export(line)
                if not d:
                    e = 'Error processing NFS export : '
                    if err:
                        e = '%s : %s' % (e, err)
                    raise Exception(e)
                else:
                    # print d
                    l.append(d)
    except Exception, e:
        return None, 'Error retrieving export list : %s' % str(e)
    else:
        return l, None


def get_shares_on_subpath(subpath):
    # Given a subpath, return all shares that have that path prefix. Used to
    # find shares on a pool
    l = []
    try:
        if not subpath.startswith('/'):
            subpath = '/%s' % subpath
        if not subpath.endswith('/'):
            subpath += '/'
        share_list, err = load_exports_list()
        if err:
            raise Exception(err)
        if share_list:
            for share in share_list:
                share_path = share['path']
                if not share_path.endswith('/'):
                    share_path += '/'
                if subpath in share_path:
                    l.append(share)
    except Exception, e:
        return None, 'Error retrieving shares on subpath: %s' % str(e)
    else:
        return l, None


def process_export(line):
    ''' Given a line from the /etc/exports file, return a dict with all relavant info '''
    d = {}
    try:
        components = line.split()
        if not components:
            return None, 'Error parsing NFS export enrty : %s' % line
        d['clients'] = []
        # print range(len(components))
        for i in range(len(components)):
            # print i
            # print components[i]
            if i == 0:
                d['path'] = components[i]
                continue
            if components[i][0] == '(':
                options = components[i].replace(r'(', '')
                options = options.replace(r')', '')
                options_list = options.split(',')
                d['options'] = options_list
                # print 'options', options_list
                continue
            # Else its an access control line
            # This could have an options specific to it so parse for that
            tmpd = {}
            if r'(' in components[i]:
                spos = components[i].index(r'(')
                if r')' not in components[i]:
                    raise Exception('Malformed NFS export entry : %s' % line)
                epos = components[i].index(r')')
                # print spos, epos
                name = components[i][0:spos]
                options_str = components[i][spos + 1:epos]
                # print options_str
                tmpd['options'] = options_str.split(',')
            else:
                name = components[i]
            tmpd['name'] = name
            d['clients'].append(tmpd)
    except Exception, e:
        return None, 'Error retrieving export entry : %s' % str(e)
    else:
        return d, None


def get_share(path, share_list=None):

    d = None
    try:
        if not path:
            raise Exception('Share path not specified')
        if not share_list:
            share_list, err = load_exports_list()
            if err:
                raise Exception(err)

        for share in share_list:
            if share['path'] == path:
                d = share
                break
    except Exception, e:
        return None, str(e)
    else:
        return d, None


def _rebuild_share_info(d):
    td = None
    try:
        td = {}
        td['path'] = d['path']
        if 'clients' in d:
            client_list = d['clients'].split(',')
            if client_list:
                td['clients'] = []
                for client in client_list:
                    cd = {}
                    cd['name'] = client
                    td['clients'].append(cd)
        options_list = []
        if d['readonly']:
            options_list.append('ro')
        else:
            options_list.append('rw')
        if d['root_squash']:
            options_list.append('root_squash')
        else:
            options_list.append('no_root_squash')
        if d['all_squash']:
            options_list.append('all_squash')
        if d['force_map_anonid']:
            user_name, err = config.get_local_nfs_user_name()
            if err:
                raise Exception(err)
            uid_gid, err = local_users.get_local_user(user_name, by_name=True)
            options_list.append('anonuid=%s,anongid=%s' %
                                (uid_gid['uid'], uid_gid['gid']))
        td['options'] = options_list
    except Exception, e:
        return None, 'Error rebuilding share info : %s' % str(e)
    else:
        return td, None


def save_share(d, new_share=False):
    try:
        if not d or 'path' not in d:
            raise Exception('Malformed share information provided.')
        share_list, err = load_exports_list()
        if err:
            raise Exception(err)
        new_list = []
        if not new_share:
            # Find the old share and update
            for share in share_list:
                if share['path'] == d['path']:
                    # Found the share so save the new info now
                    td, err = _rebuild_share_info(d)
                    if not td:
                        raise Exception(err)
                    new_list.append(td)
                else:
                    new_list.append(share)
        else:
            s, err = get_share(d['path'], share_list)
            if err:
                raise Exception(err)
            if s:
                raise Exception('An NFS export for that path already exists')
            new_list = share_list
            # Add the new share info to the list
            td, err = _rebuild_share_info(d)
            if not td:
                raise Exception(err)
            new_list.append(td)
        result, err = generate_exports(new_list)
        if not result:
            raise Exception('Error generating exports file : %s' % err)
    except Exception, e:
        return False, 'Error saving share : %s' % str(e)
    else:
        return True, None


def generate_exports(share_list):
    try:
        lines = []
        lines.append('/var/log *(ro,root_squash)')
        if share_list:
            for share in share_list:
                line = share['path']
                if 'clients' in share:
                    client_list = []
                    for client in share['clients']:
                        client_str = client['name']
                        if 'options' in client:
                            client_str = '%s(%s)' % (
                                client_str.strip(), ','.join(client['options']))
                        client_list.append(client_str.strip())
                    line += ' '
                    line += ' '.join(client_list)
                if 'options' in share:
                    line += '('
                    line += ','.join(share['options'])
                    line += ')'
                lines.append(line)
        with open('/tmp/new_exports', 'w') as f:
            if lines:
                for line in lines:
                    f.write('%s\n' % line)
            f.flush()
            f.close()
        shutil.move('/tmp/new_exports', '/etc/exports')
        ret, err = services_management.update_service_status('nfs', 'reload')
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error saving exports file : %s' % str(e)
    else:
        return True, None


def delete_share(path, share_list=None):
    l = []
    result = False
    try:
        if not share_list:
            share_list, err = load_exports_list()
            if not share_list:
                if err:
                    raise Exception(err)
                else:
                    raise Exception('Error getting share list')
        for share in share_list:
            if share['path'] == path:
                continue
            else:
                l.append(share)
        result, err = generate_exports(l)
        if err:
            raise Exception(err)
    except Exception, e:
        return result, 'Error deleting NFS export : %s' % str(e)
    else:
        return result, None


def delete_all_exports():
    try:
        with open('/etc/exports', 'w') as f:
            pass
        ret, err = services_management.update_service_status('nfs', 'reload')
        if err:
            raise Exception(err)
    except Exception, e:
        return False, 'Error deleting all NFS exports : %s' % str(e)
    else:
        return True, None


'''
def generate_exports_file(shares):
  result = False
  try:
    with open('/tmp/new_exports', 'w') as f:
      for s in shares:
        genstr = s['path']
        for client in s['clients']:
          genstr += ' '
          genstr += client['name']
          if 'options' in client:
            genstr += '('
            for option in client['options']:
              genstr += '%s,'%option
            genstr = genstr[0:len(genstr)-1]
            genstr += ')'
        if 'options' in s:
          genstr += ' '
          genstr += '('
          for option in s['options']:
            genstr += '%s,'%option
          genstr = genstr[0:len(genstr)-1]
          genstr += ')'
        genstr += '\n'
        f.write(genstr)
        f.flush()
    shutil.copyfile('/tmp/new_exports', '/etc/exports')
    os.remove('/tmp/new_exports')
    result = True
  except Exception, e:
    return result, str(e)
  else:
    return result, None
'''


def main():
    l, err = load_exports_list()
    #l, err = get_shares_on_subpath('/fractalio')
    print l, err
    # print err


if __name__ == '__main__':
    main()

# vim: tabstop=8 softtabstop=0 expandtab ai shiftwidth=4 smarttab
