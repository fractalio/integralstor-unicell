%include /tmp/part-include
########			*** START OF UNICELL KICKSTART FILE***				########
# platform=x86, AMD64, or Intel EM64T
# Fractalio-Integralstor-integralstor version=1.0

### Firewall configuration ###
firewall --disabled

### Install OS instead of upgrade ###
install
unsupported_hardware

### Defines the repo we created ###
repo --name="CentOS" --baseurl=file:///mnt/source --cost=100

### Root password ###
rootpw --iscrypted $1$NdB3lmS6$oXH5W2QCg4d6syxgE1GTA0

### System authorization information ###
auth  --useshadow  --passalgo=sha512

### Use text mode install ###
text

### System keyboard ###
keyboard us

### System language ###
lang en_US

### SELinux configuration ###
selinux --disabled

### Do not configure the X Window System ###
skipx

### Installation logging level ###
logging --level=info

### Reboot after installation ###
reboot --eject

### System timezone ###
timezone  Asia/Kolkata

### partitioning ###

%pre

#!/usr/bin/bash
DIR="/sys/block"
MAXBOOTSIZE=300
MINBOOTSIZE=1
PATH="/dev"

### Running a for loop on Disks available among one will be selected by user/admin for OS to Install ###
clear >/dev/tty1
echo >/dev/tty1

echo -n "Available disks to install Operating System and their size: " >/dev/tty1
echo >/dev/tty1
for DEV in sd{a..z} ; do
  if [ -b "/dev/$DEV" ] ; then
    #Command to get size of the hard disk
    SIZE=`/usr/bin/cat $DIR/$DEV/size`
    GB=$(($SIZE/2**21))
    if [ "$GB" -le "$MAXBOOTSIZE" ]
        then
            if [ "$GB" -ge "$MINBOOTSIZE" ]
                then
                device=$DEV
                echo >/dev/tty1
                echo -n "Disk : "$device" : Size : "$GB "GB" >/dev/tty1
                echo >/dev/tty1
            fi
    fi
    #echo -n "Disk : " $DEV " - : Size : " $GB "GB" >/dev/tty1
  fi
done
echo >/dev/tty1
echo -n "(NOTE: Please make sure that you have inserted two disks of same size to mirror the OS (To exit Press Ctrl+Alt+Del)) " >/dev/tty1
echo >/dev/tty1
echo >/dev/tty1
echo -n "Do you want to mirror the operating system drive? (y/n) : " >/dev/tty1
read input

    if [[ $input == "y" || $input == "Y" || $input == "yes" || $input == "Yes" || $input == "YES" ]] ; then

        echo -n "Please select the first mirrored OS drive (eg. sda) : " >/dev/tty1
        read bootdevice1
        echo -n "Please select the second mirrored OS drive (eg. sdb) : " >/dev/tty1
        read bootdevice2
            size1=`/usr/bin/cat $DIR/$bootdevice1/size`
            #echo -n "size of $bootdevice1 : $size1 " >/dev/tty1
            size2=`/usr/bin/cat $DIR/$bootdevice2/size`
            #echo -n "size of $bootdevice2 : $size2 " >/dev/tty1
              if [[ "$size1" == "$size2" ]] ; then

                echo -n "Please select the swap size in MBs... [Eg. 16384(for 8GB) OR 32768(for 16GB)] : " >/dev/tty1
                read swsize1
                echo >/dev/tty1
                echo "#partitioning scheme generated in %pre for 3 drives" > /tmp/part-include
                echo "bootloader --location=mbr --driveorder=$bootdevice1,$bootdevice2" >> /tmp/part-include
                echo "zerombr" >> /tmp/part-include
                echo -n "Select "YES" to clear prtitions of all disks(else it clears partition of selected BOOT disks) : " >/dev/tty1
                read partselect1

                if [[ $partselect1 == "y" || $partselect1 == "Y" || $partselect1 == "yes" || $partselect1 == "Yes" || $partselect1 == "YES" ]] ; then
                        echo "clearpart --all" >> /tmp/part-include
                else

                        echo "clearpart --drives=$bootdevice1,$bootdevice2 --all" >> /tmp/part-include
                fi

                echo "part raid.11    --size 1024     --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.12    --size $swsize  --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.13    --size 10240    --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.14    --size 10240                    --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.15    --size 10240                    --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.16    --size 10240    --grow          --ondrive=$bootdevice1" >> /tmp/part-include
                echo "part raid.21    --size 1024     --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                echo "part raid.22    --size $swsize  --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                echo "part raid.23    --size 10240    --asprimary     --ondrive=$bootdevice2" >> /tmp/part-include
                echo "part raid.24    --size 10240                    --ondrive=$bootdevice2" >> /tmp/part-include
                echo "part raid.25    --size 10240                    --ondrive=$bootdevice2" >> /tmp/part-include
                echo "part raid.26    --size 10240    --grow          --ondrive=$bootdevice2" >> /tmp/part-include

                # You can add --spares=x  
                echo "raid /boot      --fstype ext4   --device md0    --level=RAID1 raid.11 raid.21" >> /tmp/part-include
                echo "raid swap       --fstype swap   --device md1    --level=RAID1 raid.12 raid.22" >> /tmp/part-include
                echo "raid /home      --fstype ext4   --device md2    --level=RAID1 raid.13 raid.23" >> /tmp/part-include
                echo "raid /opt       --fstype ext4   --device md3    --level=RAID1 raid.14 raid.24" >> /tmp/part-include
                echo "raid /          --fstype ext4   --device md4    --level=RAID1 raid.15 raid.25" >> /tmp/part-include
                echo "raid /var/log   --fstype ext4   --device md5    --level=RAID1 raid.16 raid.26" >> /tmp/part-include

              else
                echo >/dev/tty1
                echo -n "Error occured!!! Exiting..." >/dev/tty1
                echo >/dev/tty1
              fi
    elif [[ $input == "n" || $input == "N" || $input == "no" || $input == "No" || $input == "NO" || $input == "" || $input == " " ]]; then

        echo -n "Please select the boot device (eg. sda) : " >/dev/tty1
        read bootdevice1
        echo -n "Please select the swap size in MBs... [Eg. 16384(for 8GB) OR 32768(for 16GB)] : " >/dev/tty1
        read swsize2
        echo >/dev/tty1
        echo "#partitioning scheme generated in %pre for 3 drives" > /tmp/part-include
        echo "bootloader --location=mbr" >> /tmp/part-include
        echo "zerombr" >> /tmp/part-include
        echo -n "Select "YES" to clear prtitions of all disks(else it will only clears partition of selected BOOT disk) : " >/dev/tty1
        read partselect2

        if [[ $partselect2 == "y" || $partselect2 == "Y" || $partselect2 == "yes" || $partselect2 == "Yes" || $partselect2 == "YES" ]] ; then
                echo "clearpart --all" >> /tmp/part-include
        else

                echo "clearpart --drives=$bootdevice1 --all" >> /tmp/part-include
        fi
                echo "part /boot --fstype ext4 --size 1024 --ondisk $bootdevice1" >> /tmp/part-include
                echo "part swap --fstype swap --size $swsize2 --ondisk $bootdevice1" >> /tmp/part-include
                echo "part /home --fstype ext4 --size 10240 --ondisk $bootdevice1" >> /tmp/part-include
                echo "part /opt --fstype ext4 --size 10240 --ondisk $bootdevice1" >> /tmp/part-include
                echo "part / --fstype ext4 --size 10240 --ondisk $bootdevice1" >> /tmp/part-include
                echo "part /var/log --fstype ext4 --size 1 --grow --ondisk $bootdevice1" >> /tmp/part-include

      fi
    fi


%end

### Package section ###
%packages --ignoremissing
@core
@Compatibility libraries
salt-master
salt-minion
sg3_utils
perl-Config-General
scsi-target-utils
nfs-utils
smartmontools
samba-client
samba
samba-winbind
samba-winbind-clients
smbldap-tools
openldap-clients
openldap-servers
nss-pam-ldapd
ipmitool
OpenIPMI
zfs
krb5-workstation
python-setuptools
python-pip
ypbind
ypserv
ntp
uwsgi
nginx
kexec-tools
fractalio_django
kmod-mv94xx
python-devel
gcc
vsftpd
xinetd
shellinabox
%end

%post --nochroot
#!/bin/bash
#set -x -v
#exec 1>/mnt/sysimage/root/kickstart-stage1No-chroot.log 2>&1

### Directory creation ###
mkdir -p /mnt/sysimage/opt/integralstor
mkdir -p /mnt/sysimage/run/samba
mkdir -p /mnt/sysimage/opt/integralstor/pki
mkdir -p /mnt/sysimage/disk_mount
mkdir -p /mnt/sysimage/source
mkdir -p /mnt/sysimage/var/log/integralstor/logs/scripts
mkdir -p /mnt/sysimage/opt/integralstor/integralstor/tmp
mkdir -p /mnt/sysimage/opt/integralstor/integralstor/config/status
mkdir -p /mnt/sysimage/etc/nginx/sites-enabled
mkdir -p /mnt/sysimage/etc/uwsgi/vassals
mkdir -p /mnt/sysimage/opt/integralstor/tar_files
touch /mnt/sysimage/var/log/integralstor/logs/scripts/integral_view.log
touch /var/log/integralstor/integralstor/ramdisks
touch /mnt/sysimage/opt/integralstor/ramdisks.conf
#touch /mnt/sysimage/opt/integralstor/devel_env

### Check ISO mounted at this stage on /mnt/source and if not mount it again for chroot to acces files! *only applicable for USB install ###
if [ mount | grep /dev/sda2 > /tmp/tmp_mount_test ] 
then
    echo "ISO is mounted moving further.."
else
    echo "ISO is not mounted so mounting again on /mnt"
    mount /dev/sda2 /mnt/sysimage/disk_mount
    mount -o loop,ro /mnt/sysimage/disk_mount/Integralstor_integralstor_final_usb_v1.0.iso /mnt/sysimage/source
fi

### Install integralstor_utils (***Note: In nochroot copy/creting file/Directory done only via ISO mount ie., /mnt/sysimage) ###
cd /mnt/sysimage/opt/integralstor
cp -rf /mnt/sysimage/source/tar_files/integralstor_utils.tar.gz .
tar xzf integralstor_utils.tar.gz
rm -rf integralstor_utils.tar.gz

### Install integralstor ###
cp -rf /mnt/sysimage/source/tar_files/integralstor.tar.gz .
tar xzf integralstor.tar.gz
rm -rf integralstor.tar.gz

### Configure ZFS ###
rm -f /etc/modprobe.d/zfs.conf

### Configure nsswitch ###
rm -rf /etc/nsswitch.conf
cp -rf /mnt/sysimage/opt/integralstor/integralstor/install/conf_files/nsswitch.conf /etc

###Change the ramdisks conf file name and location, move it into /opt/integralstor so it can be common to integralstor and gridcell
rm -rf /etc/init.d/ramdisk
rm -f /etc/vsftpd/vsftpd.conf

### Download non-rpm based software..(***Installation of Non-rpm Based software is done on 1st Boot/one time installation) ###
rpm -e sysstat-9.0.4-27.el6.x8
cp -rf /mnt/sysimage/source/tar_files/* /mnt/sysimage/opt/integralstor/tar_files

### copying kmod-mv94xx directory to systems kernel Directory(This is spesific to Marvel servers) ###
cp -rf /lib/modules/2.6.32-431.el6.x86_64/extra/mv94xx /lib/modules/2.6.32-504.el6.x86_64/extra

### Grub and other file modification to show title/name Integralstor Unicell instead Centos 6.6 ###
rm -f /etc/issue 
cp -f /mnt/source/conf_files/issue /etc
rm -f /etc/centos-release
cp -f /mnt/source/conf_files/centos-release /etc
rm -f /usr/share/plymouth/themes/text/text.plymouth
cp -f /mnt/source/conf_files/text.plymouth /usr/share/plymouth/themes/text
cp -f /mnt/source/conf_files/zed.conf /etc/init

%end

%post 
# Post Install Logs are in /root/kickstart-stage2chroot.log
#set -x -v
#exec 1>/root/kickstart-stage2chroot.log 2>&1

### Adding a user and group called integralstor ###
groupadd integralstor -g 500
useradd integralstor -g 500
useradd replicator -g 501
groupadd replicator -g 501
echo "integralstor123" | passwd --stdin integralstor
echo "replicator123" | passwd --stdin replicator
echo "integralstor    ALL=(ALL)    ALL" >> /etc/sudoers
echo "replicator    ALL=(ALL)    NOPASSWD: /sbin/zfs" >> /etc/sudoers
echo "AllowUsers replicator integralstor" >> /etc/ssh/sshd_config #root is allowed temp. untill fixes for replicator. 

### Setting hostname ###
# By extracting the last two mac fields for hostname
# and setting the hostname to "integralstor-xx.integralstor.lan"
STRING=$(ifconfig | grep eth0 | head -1 | awk '{print $5}' | awk -F ':' '{print tolower($5 $6)}')
hnpart="integralstor-"$STRING
hostname="$hnpart.integralstor.lan"
echo "Hostname will be : " $hostname ; echo
echo "HOSTNAME=$hostname" > /etc/sysconfig/network
echo "NETWORKING=yes" >> /etc/sysconfig/network
# Editing /etc/hosts
ip=$(ifconfig | awk -F':' '/inet addr/&&!/127.0.0.1/{split($2,_," ");print _[1]}')
echo "$ip $hnpart $hostname" >> /etc/hosts

### Disabling the OPenGPGCheck and reloading the abrtd service ###
if [ -e "/etc/abrt/abrt-action-save-package-data.conf" ] ; then
  sed -i 's/OpenGPGCheck = yes/OpenGPGCheck = no/' /etc/abrt/abrt-action-save-package-data.conf 
else
  echo "No such file found : /etc/abrt/abrt-action-save-package-data.conf"
fi

### SSHD configuration ###
/etc/init.d/sshd stop
sed '' /etc/ssh/sshd_config > /etc/ssh/original_sshd_config
sed '/#PermitRootLogin/a PermitRootLogin no' /etc/ssh/sshd_config > /etc/ssh/temp_file
#echo 'AllowUsers integralstor' >> /etc/ssh/temp_file
sed -e '/requiretty/s/^/#/g' -i /etc/sudoers    #serach for requiretty and comment. This is to avoid tty for replication in zfs send/receive
rm -f /etc/ssh/sshd_config
mv /etc/ssh/temp_file /etc/ssh/sshd_config
/etc/init.d/sshd start
ssh-keygen -t rsa -f /root/.ssh/id_rsa -N ''

### Editing the /etc/yum.repos.d/CentOS-Base.repo to disable base, updates and extras repositories. ###
cp -rf /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/Original-CentOS-Base-repo
sed -i '/\[base\]/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo 
sed -i '/\[updates\]/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo 
sed -i '/\[extras\]/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo
sed -i '/\[centosplus\]/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo
sed -i '/\[contrib\]/a enabled=0' /etc/yum.repos.d/CentOS-Base.repo

### Linking integralstor_utils ###
cd /opt/integralstor
ln -s /opt/integralstor/integralstor_utils/site-packages/integralstor_utils /usr/lib/python2.6/site-packages/integralstor_utils

### Linking Integralstor_integralstor ###
ln -s /opt/integralstor/integralstor/site-packages/integralstor /usr/lib/python2.6/site-packages
ln -s /opt/integralstor/integralstor/platform /opt/integralstor
echo "self" >> /opt/integralstor/platform

mv /etc/sysconfig/shellinaboxd /etc/sysconfig/shellinaboxd.bak
ln -s /opt/integralstor/integralstor/config/shellinabox/shellinaboxd /etc/sysconfig

### changing Permission to 755(u=rwx,g=rx,o=rx) ###
chmod 755 /opt/integralstor/integralstor/scripts/python/*
chmod 755 /opt/integralstor/integralstor/scripts/shell/*
chmod +x /etc/start-ttys.conf

### Configure nginx ###
ln -s /opt/integralstor/integralstor/integral_view/integral_view_nginx.conf /etc/nginx/sites-enabled/
sed -i 's/conf.d/sites-enabled/g' /etc/nginx/nginx.conf
sed -i 's/ONBOOT=no/ONBOOT=yes/g' /etc/sysconfig/network-scripts/ifcfg-eth0

### Cinfigure xinetd ###
cd /etc/xinetd.d/
mv rsync rsync.bak
cp -f /mnt/source/conf_files/rsync /etc/xinetd.d
#sed -i 's/disable = yes/disable = no/' /etc/xinetd.d/rsync

### Configure uwsgi ###
ln -s /opt/integralstor/integralstor/integral_view/integral_view_uwsgi.ini /etc/uwsgi/vassals/
rm -rf /etc/init.d/uwsgi
ln -s /opt/integralstor/integralstor_utils/scripts/init/uwsgi /etc/init.d/
echo "/usr/bin/uwsgi --emperor /etc/uwsgi/vassals --uid root --gid root >/var/log/integralstor/logs/scripts/integral_view.log 2>&1 &" >> /etc/rc.local
sed -i "/\/usr\/local\/bin\/uwsgi --emperor \/etc\/uwsgi\/vassals --uid root --gid root/d" /etc/rc.local
#sed -e 's#^\(ACTIVE_CONSOLES=\).*$#\1/dev/hvc0#' -i /etc/sysconfig/init #to change stsrt-tty.conf executable

### Linking MENU files ###
rm -rf /etc/init/start-ttys.conf
cp -rf /opt/integralstor/integralstor/install/conf_files/start-ttys.conf /etc/init/start-ttys.override
cp -rf /opt/integralstor/integralstor/install/conf_files/integralstor_menu.conf /etc/init
chmod +x /etc/init/start-ttys.conf
chmod +x /etc/init/start-ttys.override

### Linking and change permission of Ramdisk file ###
ln -fs /opt/integralstor/integralstor_utils/install/scripts/ramdisk /etc/init.d/
chmod +x /etc/init.d/ramdisk

## Configure crontab ###
(crontab -l 2>/dev/null; echo 'MAILTO=""') | crontab -
(crontab -l 2>/dev/null; echo "SHELL=/bin/sh") | crontab -
(crontab -l 2>/dev/null; echo "PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin") | crontab -
(crontab -l 2>/dev/null; echo "*/1 * * * * /opt/integralstor/integralstor_utils/scripts/python/generate_status.py > /tmp/out_status >> /tmp/err_status") | crontab -
(crontab -l 2>/dev/null; echo "*/10 * * * * /usr/lib64/sa/sa1 1 1 -S DISK > /tmp/out_status >> /tmp/err_status") | crontab -
(crontab -l 2>/dev/null; echo "10,40 * * * * /usr/bin/python -c 'from integralstor_utils import zfs; zfs.execute_remote_replication()' > /tmp/replication_alerts >> /tmp/replication_errors") | crontab -
(crontab -l 2>/dev/null; echo "*/1 * * * * /opt/integralstor/integralstor_utils/scripts/python/poll_for_alerts.py > /tmp/out_alerts >> /tmp/err_alerts") | crontab -
(crontab -l 2>/dev/null; echo "* * * * * /usr/bin/python -c 'from integralstor_utils import scheduler_utils; scheduler_utils.run_from_shell()' > /tmp/scheduler_alerts >> /tmp/scheduler_errors") | crontab -
(crontab -l 2>/dev/null; echo "0 0 * * * /usr/bin/python -c 'from integralstor_utils import logs; logs.auto_rotate_logs()' > /tmp/auto_rotate_logs_alerts >> /tmp/auto_rotate_errors") | crontab -


### Linking ZFS conf file ###
ln -fs /opt/integralstor/integralstor_utils/install/conf_files/zfs.conf /etc/modprobe.d/
cp -rf /opt/integralstor/integralstor/install/conf_files/zed.rc /etc/zfs/zed.d

### configuring Vsftpd ###
ln -fs /opt/integralstor/integralstor/install/conf_files/vsftpd.conf /etc/vsftpd


### NON-rpm ###

cd /opt/integralstor/tar_files
#tar xJf sysstat-11.0.5.tar.xz
cd sysstat-11.0.5
./configure --prefix=/usr
make
make install
sleep 1
cd /opt/integralstor/tar_files
rm -rf sysstat-11.0.5

cd /opt/integralstor/tar_files
tar xzf setuptools-11.3.1.tar.gz
cd setuptools-11.3.1
python setup.py install
sleep 1
cd /opt/integralstor/tar_files
rm -rf setuptools-11.3.1.tar.gz

cd /opt/integralstor/tar_files
tar xzf uwsgi-2.0.9.tar.gz
cd uwsgi-2.0.9
python setup.py install
sleep 1
cd /opt/integralstor/tar_files
rm -rf uwsgi-2.0.9.tar.gz

cd /opt/integralstor/tar_files
tar xzf netifaces-0.10.4.tar.gz
cd netifaces-0.10.4
python setup.py install
sleep 1
cd /opt/integralstor/tar_files
rm -rf netifaces-0.10.4.tar.gz

cd /opt/integralstor/tar_files
tar xzf python-dateutil-2.4.2.tar.gz
cd python-dateutil-2.4.2
python setup.py install
sleep 1
cd /opt/integralstor/tar_files
rm -rf python-dateutil-2.4.2.tar.gz

cd /opt/integralstor/tar_files
tar xzf python-crontab-1.9.3.tar.gz
cd python-crontab-1.9.3
python setup.py install
sleep 1
cd /opt/integralstor/tar_files
rm -rf python-crontab-1.9.3.tar.gz

cd /opt/integralstor/tar_files
tar xzf zfs-auto-snapshot.tar.gz
cd zfs-auto-snapshot
make install
sleep 1
cd /opt/integralstor/tar_files
rm -rf zfs-auto-snapshot.tar.gz

cd /opt/integralstor
rm -rf /opt/integralstor/tar_files

### End NON-rpm ###

### Configure rc.local ###
modprobe ipmi_devintf
modprobe 8021q
cp -f /sbin/zed /etc/init.d
echo "/sbin/zed" >> /etc/rc.local
echo "modprobe ipmi_devintf" >> /etc/rc.local
echo "/sbin/modprobe zfs" >> /etc/rc.local
chmod 755 /etc/rc.local
ln -sf /etc/rc.local /etc/rc3.d/S99local

### copying kmod-mv94xx directory to systems kernel Directory(This is spesific to Marvel servers) ###
cp -rf /lib/modules/2.6.32-431.el6.x86_64/extra/mv94xx /lib/modules/2.6.32-504.el6.x86_64/extra


dracut -f


### Running other services ON BOOT ###
chkconfig rpcbind on
chkconfig nfs on
chkconfig winbind on
chkconfig smb on
chkconfig tgtd on
chkconfig ntpd on
chkconfig crond on
chkconfig ramdisk on
chkconfig uwsgi on
########			*** END OF UNICELL KICKSTART FILE*** 			########
%end
